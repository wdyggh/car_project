
Car_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  00002154  000021e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  008002d6  008002d6  000023be  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000050b  00000000  00000000  0000255e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b0b  00000000  00000000  00002a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014c7  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a03  00000000  00000000  00006a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00008440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063c  00000000  00000000  00008770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cba  00000000  00000000  00008dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00009a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_2>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e5       	ldi	r30, 0x54	; 84
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3d       	cpi	r26, 0xD6	; 214
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a6 ed       	ldi	r26, 0xD6	; 214
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3e       	cpi	r26, 0xE1	; 225
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d7 05 	call	0xbae	; 0xbae <main>
      c6:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
void send_protocol(char command, char ack_nack);
void step_count_check(void);


ISR(USART0_RX_vect)		// USART0 수신 완료 인터럽트 루틴( Zigbee Data RX )	
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	11 24       	eor	r1, r1
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
	char status, data;
	
	status = UCSR0A;
      e8:	8b b1       	in	r24, 0x0b	; 11
	data = UDR0; 
      ea:	2c b1       	in	r18, 0x0c	; 12
    UDR0 = data;
}

void debug_data (unsigned char data) 
{
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
      ec:	80 91 9b 00 	lds	r24, 0x009B
      f0:	85 ff       	sbrs	r24, 5
      f2:	fc cf       	rjmp	.-8      	; 0xec <__vector_18+0x1e>
    UDR1 = data;
      f4:	20 93 9c 00 	sts	0x009C, r18
	status = UCSR0A;
	data = UDR0; 
	
	debug_data(data);
 
	switch( state ){
      f8:	30 91 79 03 	lds	r19, 0x0379
      fc:	33 23       	and	r19, r19
      fe:	21 f0       	breq	.+8      	; 0x108 <__vector_18+0x3a>
     100:	31 30       	cpi	r19, 0x01	; 1
     102:	09 f0       	breq	.+2      	; 0x106 <__vector_18+0x38>
     104:	5a c0       	rjmp	.+180    	; 0x1ba <__vector_18+0xec>
     106:	17 c0       	rjmp	.+46     	; 0x136 <__vector_18+0x68>
		case STX_STATE : 
					
					  if(data == STX) {
     108:	22 30       	cpi	r18, 0x02	; 2
     10a:	01 f5       	brne	.+64     	; 0x14c <__vector_18+0x7e>
						rx_usi = 0;
     10c:	10 92 ea 02 	sts	0x02EA, r1
     110:	10 92 e9 02 	sts	0x02E9, r1
						rx_string[rx_usi++] = data;
     114:	80 91 e9 02 	lds	r24, 0x02E9
     118:	90 91 ea 02 	lds	r25, 0x02EA
     11c:	fc 01       	movw	r30, r24
     11e:	e3 58       	subi	r30, 0x83	; 131
     120:	fc 4f       	sbci	r31, 0xFC	; 252
     122:	20 83       	st	Z, r18
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	90 93 ea 02 	sts	0x02EA, r25
     12a:	80 93 e9 02 	sts	0x02E9, r24
						state = DATA_STATE;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 79 03 	sts	0x0379, r24
     134:	42 c0       	rjmp	.+132    	; 0x1ba <__vector_18+0xec>
	                  }
					  break;
		
		case DATA_STATE :
					
					if(rx_usi >  200){
     136:	80 91 e9 02 	lds	r24, 0x02E9
     13a:	90 91 ea 02 	lds	r25, 0x02EA
     13e:	89 3c       	cpi	r24, 0xC9	; 201
     140:	91 05       	cpc	r25, r1
     142:	3c f0       	brlt	.+14     	; 0x152 <__vector_18+0x84>
						 rx_usi = 0;
     144:	10 92 ea 02 	sts	0x02EA, r1
     148:	10 92 e9 02 	sts	0x02E9, r1
						 state = STX_STATE;
     14c:	10 92 79 03 	sts	0x0379, r1
     150:	34 c0       	rjmp	.+104    	; 0x1ba <__vector_18+0xec>
						 
					}					
					else{	 	
				
						if(data == ETX) {
     152:	23 30       	cpi	r18, 0x03	; 3
     154:	19 f5       	brne	.+70     	; 0x19c <__vector_18+0xce>
							rx_string[rx_usi++] = data;
     156:	80 91 e9 02 	lds	r24, 0x02E9
     15a:	90 91 ea 02 	lds	r25, 0x02EA
     15e:	fc 01       	movw	r30, r24
     160:	e3 58       	subi	r30, 0x83	; 131
     162:	fc 4f       	sbci	r31, 0xFC	; 252
     164:	20 83       	st	Z, r18
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	90 93 ea 02 	sts	0x02EA, r25
     16c:	80 93 e9 02 	sts	0x02E9, r24
	             			state = STX_STATE;
     170:	10 92 79 03 	sts	0x0379, r1
	                    
	        				rx_str_len = (rx_usi-1);
     174:	80 91 e9 02 	lds	r24, 0x02E9
     178:	90 91 ea 02 	lds	r25, 0x02EA
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	90 93 ee 02 	sts	0x02EE, r25
     182:	80 93 ed 02 	sts	0x02ED, r24
							save_rx_str_len	= rx_str_len;		
     186:	80 91 ed 02 	lds	r24, 0x02ED
     18a:	90 91 ee 02 	lds	r25, 0x02EE
     18e:	90 93 f0 02 	sts	0x02F0, r25
     192:	80 93 ef 02 	sts	0x02EF, r24
							rx_eflg = 1;				
     196:	30 93 e8 02 	sts	0x02E8, r19
     19a:	0f c0       	rjmp	.+30     	; 0x1ba <__vector_18+0xec>
							
		            	}
		            	else {
	        				rx_string[rx_usi++] = data;
     19c:	80 91 e9 02 	lds	r24, 0x02E9
     1a0:	90 91 ea 02 	lds	r25, 0x02EA
     1a4:	fc 01       	movw	r30, r24
     1a6:	e3 58       	subi	r30, 0x83	; 131
     1a8:	fc 4f       	sbci	r31, 0xFC	; 252
     1aa:	20 83       	st	Z, r18
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	90 93 ea 02 	sts	0x02EA, r25
     1b2:	80 93 e9 02 	sts	0x02E9, r24
                			state = DATA_STATE;
     1b6:	30 93 79 03 	sts	0x0379, r19
					break;
		default: break;

	}		

}
     1ba:	ff 91       	pop	r31
     1bc:	ef 91       	pop	r30
     1be:	9f 91       	pop	r25
     1c0:	8f 91       	pop	r24
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	0f 90       	pop	r0
     1c8:	0b be       	out	0x3b, r0	; 59
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <sw_step_motor>:

void sw_step_motor(int Step_speed )	// TIMER0 OVF
{   
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	9c 01       	movw	r18, r24

	PORTA = STEP_TBL_2[idx];
     1e6:	e0 91 da 02 	lds	r30, 0x02DA
     1ea:	f0 91 db 02 	lds	r31, 0x02DB
     1ee:	ee 53       	subi	r30, 0x3E	; 62
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 81       	ld	r24, Z
     1f4:	8b bb       	out	0x1b, r24	; 27
	
	// FORWARD : 정회전, REVERSE : 역회전
	if( DIR == FORWARD ){
     1f6:	80 91 78 03 	lds	r24, 0x0378
     1fa:	86 34       	cpi	r24, 0x46	; 70
     1fc:	31 f5       	brne	.+76     	; 0x24a <sw_step_motor+0x76>
		idx++; 
     1fe:	80 91 da 02 	lds	r24, 0x02DA
     202:	90 91 db 02 	lds	r25, 0x02DB
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	90 93 db 02 	sts	0x02DB, r25
     20c:	80 93 da 02 	sts	0x02DA, r24
		if(idx > 7) idx = 0;
     210:	80 91 da 02 	lds	r24, 0x02DA
     214:	90 91 db 02 	lds	r25, 0x02DB
     218:	08 97       	sbiw	r24, 0x08	; 8
     21a:	24 f0       	brlt	.+8      	; 0x224 <sw_step_motor+0x50>
     21c:	10 92 db 02 	sts	0x02DB, r1
     220:	10 92 da 02 	sts	0x02DA, r1
		step_count++;
     224:	80 91 de 02 	lds	r24, 0x02DE
     228:	90 91 df 02 	lds	r25, 0x02DF
     22c:	a0 91 e0 02 	lds	r26, 0x02E0
     230:	b0 91 e1 02 	lds	r27, 0x02E1
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	a1 1d       	adc	r26, r1
     238:	b1 1d       	adc	r27, r1
     23a:	80 93 de 02 	sts	0x02DE, r24
     23e:	90 93 df 02 	sts	0x02DF, r25
     242:	a0 93 e0 02 	sts	0x02E0, r26
     246:	b0 93 e1 02 	sts	0x02E1, r27
    }
	else if ( DIR == STOP ) {	
		
    }
	_delay_ms( Step_speed );
     24a:	b9 01       	movw	r22, r18
     24c:	88 27       	eor	r24, r24
     24e:	77 fd       	sbrc	r23, 7
     250:	80 95       	com	r24
     252:	98 2f       	mov	r25, r24
     254:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__floatsisf>
     258:	5b 01       	movw	r10, r22
     25a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	4a e7       	ldi	r20, 0x7A	; 122
     262:	55 e4       	ldi	r21, 0x45	; 69
     264:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     268:	7b 01       	movw	r14, r22
     26a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e8       	ldi	r20, 0x80	; 128
     272:	5f e3       	ldi	r21, 0x3F	; 63
     274:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__ltsf2>
     278:	88 23       	and	r24, r24
     27a:	1c f4       	brge	.+6      	; 0x282 <sw_step_motor+0xae>
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	24 c0       	rjmp	.+72     	; 0x2ca <sw_step_motor+0xf6>
		__ticks = 1;
	else if (__tmp > 65535)
     282:	c8 01       	movw	r24, r16
     284:	b7 01       	movw	r22, r14
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	3f ef       	ldi	r19, 0xFF	; 255
     28a:	4f e7       	ldi	r20, 0x7F	; 127
     28c:	57 e4       	ldi	r21, 0x47	; 71
     28e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__gtsf2>
     292:	18 16       	cp	r1, r24
     294:	b4 f4       	brge	.+44     	; 0x2c2 <sw_step_motor+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     296:	c6 01       	movw	r24, r12
     298:	b5 01       	movw	r22, r10
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e2       	ldi	r20, 0x20	; 32
     2a0:	51 e4       	ldi	r21, 0x41	; 65
     2a2:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     2a6:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2aa:	80 e9       	ldi	r24, 0x90	; 144
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <sw_step_motor+0xe6>
     2b0:	fc 01       	movw	r30, r24
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <sw_step_motor+0xde>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	61 50       	subi	r22, 0x01	; 1
     2b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ba:	61 15       	cp	r22, r1
     2bc:	71 05       	cpc	r23, r1
     2be:	c1 f7       	brne	.-16     	; 0x2b0 <sw_step_motor+0xdc>
     2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <sw_step_motor+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2c2:	c8 01       	movw	r24, r16
     2c4:	b7 01       	movw	r22, r14
     2c6:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fixunssfsi>
     2ca:	cb 01       	movw	r24, r22
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <sw_step_motor+0xf8>
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	bf 90       	pop	r11
     2de:	af 90       	pop	r10
     2e0:	08 95       	ret

000002e2 <__vector_2>:
	//_delay_ms(20);	
	//EIFR = 0x01;	// EIFR = (1<<INTF0); 플래그 리셋 (다시 INT0으로 진입하는걸 피하기 위해)

}
ISR(INT1_vect)	
{	
     2e2:	1f 92       	push	r1
     2e4:	0f 92       	push	r0
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	8f 93       	push	r24
	DIR = STOP;
     2ee:	83 e5       	ldi	r24, 0x53	; 83
     2f0:	80 93 78 03 	sts	0x0378, r24
	//PORTA = ~0x00;
	//PORTA = STEP_TBL_1[idx];
}
     2f4:	8f 91       	pop	r24
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <port_init>:
void port_init(void)
{
	DDRA = 0xff;		// Stepping Motor 
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0x00;
     304:	10 92 61 00 	sts	0x0061, r1
	//DDRD |= ~0x01;
	DDRC |= 0xfc;    // PC0 PC1 test_sw
     308:	84 b3       	in	r24, 0x14	; 20
     30a:	8c 6f       	ori	r24, 0xFC	; 252
     30c:	84 bb       	out	0x14, r24	; 20
}
     30e:	08 95       	ret

00000310 <interrupt_init>:

void interrupt_init(void)
{
	EIMSK=0x01|0x02;		//INT0 INT1
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	89 bf       	out	0x39, r24	; 57
	EICRA=0x02|0x00;		//falling low
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	80 93 6a 00 	sts	0x006A, r24

}
     31a:	08 95       	ret

0000031c <init_serial>:
// uart 0 setting : debug
void init_serial(unsigned long baud)
{
     31c:	9b 01       	movw	r18, r22
     31e:	ac 01       	movw	r20, r24
	unsigned short ubrr;

	ubrr=(unsigned short)(CPU_CLOCK_HZ/(16*baud))-1;
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	22 0f       	add	r18, r18
     324:	33 1f       	adc	r19, r19
     326:	44 1f       	adc	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	8a 95       	dec	r24
     32c:	d1 f7       	brne	.-12     	; 0x322 <init_serial+0x6>
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	74 e2       	ldi	r23, 0x24	; 36
     332:	84 ef       	ldi	r24, 0xF4	; 244
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodsi4>
     33a:	21 50       	subi	r18, 0x01	; 1
     33c:	30 40       	sbci	r19, 0x00	; 0
	UBRR0H=(unsigned char)(ubrr>>8);
     33e:	30 93 90 00 	sts	0x0090, r19
	UBRR0L=(unsigned char)(ubrr & 0xff);
     342:	29 b9       	out	0x09, r18	; 9
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);		// RX, TX, 수신완료 인터럽트 허용
     344:	88 e9       	ldi	r24, 0x98	; 152
     346:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (3<<UCSZ00);	// 비동기모드, 1 정지 비트 8 데이터 비트
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 95 00 	sts	0x0095, r24
}
     34e:	08 95       	ret

00000350 <init_debug_serial>:

// uart 1 setting : zigbee
void init_debug_serial(unsigned long baud)
{
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
	unsigned short ubrr;
	ubrr = (unsigned short) (CPU_CLOCK_HZ/(16*baud)-1);
     354:	94 e0       	ldi	r25, 0x04	; 4
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	44 1f       	adc	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	9a 95       	dec	r25
     360:	d1 f7       	brne	.-12     	; 0x356 <init_debug_serial+0x6>
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	74 e2       	ldi	r23, 0x24	; 36
     366:	84 ef       	ldi	r24, 0xF4	; 244
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodsi4>
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	30 40       	sbci	r19, 0x00	; 0
	UBRR1H = (unsigned char)(ubrr >> 8);
     372:	30 93 98 00 	sts	0x0098, r19
	UBRR1L = (unsigned char)(ubrr & 0xff);
     376:	20 93 99 00 	sts	0x0099, r18
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     37a:	88 e1       	ldi	r24, 0x18	; 24
     37c:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3<<UCSZ00);	// 비동기모드, 1 정지 비트 8 데이터 비트
     380:	86 e0       	ldi	r24, 0x06	; 6
     382:	80 93 9d 00 	sts	0x009D, r24
}
     386:	08 95       	ret

00000388 <adc_init>:

void adc_init()			// ADC 설정	
{
	// 프리스케일러 비를 128, ADC 사용하도록 설정
	ADCSRA = (1<<ADEN) | (7<<ADPS0);
     388:	87 e8       	ldi	r24, 0x87	; 135
     38a:	86 b9       	out	0x06, r24	; 6
}
     38c:	08 95       	ret

0000038e <STEP_INIT>:

void STEP_INIT(unsigned char type){
	switch(type) {
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	51 f0       	breq	.+20     	; 0x3a6 <STEP_INIT+0x18>
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	29 f0       	breq	.+10     	; 0x3a0 <STEP_INIT+0x12>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	31 f4       	brne	.+12     	; 0x3a6 <STEP_INIT+0x18>
		case ONE_PHASE: step_pulse = STEP_TBL_1;
     39a:	8a eb       	ldi	r24, 0xBA	; 186
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <STEP_INIT+0x1c>
						break;
		case TWO_PHASE:	step_pulse = STEP_TBL_2;
						break;				
		
		case ONETWO_PHASE:	step_pulse = STEP_TBL_1_2;
     3a0:	82 eb       	ldi	r24, 0xB2	; 178
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <STEP_INIT+0x1c>
							break;				
		default: 	step_pulse= STEP_TBL_2;
     3a6:	82 ec       	ldi	r24, 0xC2	; 194
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	90 93 7c 03 	sts	0x037C, r25
     3ae:	80 93 7b 03 	sts	0x037B, r24
     3b2:	08 95       	ret

000003b4 <check_step_count>:
	
}

void check_step_count() {
	
	if( step_count >= 2000 ) {
     3b4:	80 91 de 02 	lds	r24, 0x02DE
     3b8:	90 91 df 02 	lds	r25, 0x02DF
     3bc:	a0 91 e0 02 	lds	r26, 0x02E0
     3c0:	b0 91 e1 02 	lds	r27, 0x02E1
     3c4:	80 5d       	subi	r24, 0xD0	; 208
     3c6:	97 40       	sbci	r25, 0x07	; 7
     3c8:	a0 40       	sbci	r26, 0x00	; 0
     3ca:	b0 40       	sbci	r27, 0x00	; 0
     3cc:	70 f0       	brcs	.+28     	; 0x3ea <check_step_count+0x36>
		// printf("\rstep count is %d => init 0\n", step_count);
		step_count = 0;
     3ce:	10 92 de 02 	sts	0x02DE, r1
     3d2:	10 92 df 02 	sts	0x02DF, r1
     3d6:	10 92 e0 02 	sts	0x02E0, r1
     3da:	10 92 e1 02 	sts	0x02E1, r1
		step_count_flag = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 e7 02 	sts	0x02E7, r25
     3e6:	80 93 e6 02 	sts	0x02E6, r24
     3ea:	08 95       	ret

000003ec <device_init>:
	//PORTA = ~0x00;
	//PORTA = STEP_TBL_1[idx];
}
void port_init(void)
{
	DDRA = 0xff;		// Stepping Motor 
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0x00;
     3f0:	10 92 61 00 	sts	0x0061, r1
	//DDRD |= ~0x01;
	DDRC |= 0xfc;    // PC0 PC1 test_sw
     3f4:	84 b3       	in	r24, 0x14	; 20
     3f6:	8c 6f       	ori	r24, 0xFC	; 252
     3f8:	84 bb       	out	0x14, r24	; 20
}

void interrupt_init(void)
{
	EIMSK=0x01|0x02;		//INT0 INT1
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	89 bf       	out	0x39, r24	; 57
	EICRA=0x02|0x00;		//falling low
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 6a 00 	sts	0x006A, r24
	port_init();
	// adc_init();
	
	interrupt_init();
    	
	init_serial(9600);			// uart 1 init
     404:	60 e8       	ldi	r22, 0x80	; 128
     406:	75 e2       	ldi	r23, 0x25	; 37
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 8e 01 	call	0x31c	; 0x31c <init_serial>
	init_debug_serial(9600);	// uart 0 init : debug print
     410:	60 e8       	ldi	r22, 0x80	; 128
     412:	75 e2       	ldi	r23, 0x25	; 37
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 a8 01 	call	0x350	; 0x350 <init_debug_serial>
	//STEP_INIT(TWO_PHASE);
	
	// fdevopen( (int(*)(char, FILE *))debug_data, (int(*)(char, FILE *))rx_getchar_1);	// //printf 사용을 위한 것
	// fdevopen( debug_data, rx_getchar_1);	// //printf 사용을 위한 것

	sei();
     41c:	78 94       	sei
} 
     41e:	08 95       	ret

00000420 <rx_getchar_0>:
{	
	char ch;

	// 수신 버퍼에 문자가 찰 때까지 기다림
	// RXC 플래그 비트는 읽지 않은 데이터가 있을 때 세트, 비워지면 지워진다.
	while(!(UCSR0A & (1<<RXC)));
     420:	5f 9b       	sbis	0x0b, 7	; 11
     422:	fe cf       	rjmp	.-4      	; 0x420 <rx_getchar_0>

	ch = UDR0;
     424:	8c b1       	in	r24, 0x0c	; 12

	return ch;
}
     426:	08 95       	ret

00000428 <rx_getchar_1>:
{	
	char ch;

	// 수신 버퍼에 문자가 찰 때까지 기다림
	// RXC 플래그 비트는 읽지 않은 데이터가 있을 때 세트, 비워지면 지워진다.
	while(!(UCSR1A & (1<<RXC)));
     428:	80 91 9b 00 	lds	r24, 0x009B
     42c:	87 ff       	sbrs	r24, 7
     42e:	fc cf       	rjmp	.-8      	; 0x428 <rx_getchar_1>

	ch = UDR1;
     430:	80 91 9c 00 	lds	r24, 0x009C

	return ch;
}
     434:	08 95       	ret

00000436 <tx_data>:

void tx_data (unsigned char data) 
{
	while((UCSR0A & (1<<UDRE0)) == 0x00); 
     436:	5d 9b       	sbis	0x0b, 5	; 11
     438:	fe cf       	rjmp	.-4      	; 0x436 <tx_data>
    UDR0 = data;
     43a:	8c b9       	out	0x0c, r24	; 12
}
     43c:	08 95       	ret

0000043e <debug_data>:

void debug_data (unsigned char data) 
{
     43e:	98 2f       	mov	r25, r24
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
     440:	80 91 9b 00 	lds	r24, 0x009B
     444:	85 ff       	sbrs	r24, 5
     446:	fc cf       	rjmp	.-8      	; 0x440 <debug_data+0x2>
    UDR1 = data;
     448:	90 93 9c 00 	sts	0x009C, r25
}
     44c:	08 95       	ret

0000044e <adc_convert>:

void adc_convert(unsigned int *pData) {
     44e:	fc 01       	movw	r30, r24
     450:	dc 01       	movw	r26, r24
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	40 e9       	ldi	r20, 0x90	; 144
     456:	51 e0       	ldi	r21, 0x01	; 1
	for(i=0; i<AD_CHANNEL; i++) {
		// Mux 설정
		// 결과를 레지스터에 오른쪽 정렬
		// 싱글엔드 입력으로 i-번째 ADC 채널 설정
		// 내부 기준 전압 2.56v
		ADMUX = (3<<REFS0) | (i<<MUX0);
     458:	82 2f       	mov	r24, r18
     45a:	80 6c       	ori	r24, 0xC0	; 192
     45c:	87 b9       	out	0x07, r24	; 7
     45e:	ca 01       	movw	r24, r20
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <adc_convert+0x12>
		_delay_us(100);	
				 
		ADCSRA |= (1<<ADSC);	// AD 변환 시작
     464:	36 9a       	sbi	0x06, 6	; 6
	
		while(! (ADCSRA & (1<<ADIF)));	// 변환 종료를 기다림
     466:	34 9b       	sbis	0x06, 4	; 6
     468:	fe cf       	rjmp	.-4      	; 0x466 <adc_convert+0x18>
		// 변환 결과가 완료되면 ADIF 비트가 세트된다.
		// 해당 인터럽트 서비스루틴이 수행될 때 자동적으로 리셋
		// 1울 써도 ADIF 비트는 리셋된다.
			// i채널의 변환 결과를 읽는다.
		pData[i] = ADC;
     46a:	84 b1       	in	r24, 0x04	; 4
     46c:	95 b1       	in	r25, 0x05	; 5
     46e:	8d 93       	st	X+, r24
     470:	9d 93       	st	X+, r25
	
		ADCSRA |= (1<<ADIF);	// ADIF 플래그 지움
     472:	34 9a       	sbi	0x06, 4	; 6
     474:	2f 5f       	subi	r18, 0xFF	; 255

void adc_convert(unsigned int *pData) {
	
	int i;

	for(i=0; i<AD_CHANNEL; i++) {
     476:	22 30       	cpi	r18, 0x02	; 2
     478:	79 f7       	brne	.-34     	; 0x458 <adc_convert+0xa>
	
		ADCSRA |= (1<<ADIF);	// ADIF 플래그 지움
	
	
	}
	pData[1] = pData[1]>>2;	// 온도
     47a:	82 81       	ldd	r24, Z+2	; 0x02
     47c:	93 81       	ldd	r25, Z+3	; 0x03
     47e:	96 95       	lsr	r25
     480:	87 95       	ror	r24
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	93 83       	std	Z+3, r25	; 0x03
     488:	82 83       	std	Z+2, r24	; 0x02
}
     48a:	08 95       	ret

0000048c <serial_string>:

void serial_string(unsigned char *data)		
{
     48c:	fc 01       	movw	r30, r24
     48e:	04 c0       	rjmp	.+8      	; 0x498 <serial_string+0xc>
	return ch;
}

void tx_data (unsigned char data) 
{
	while((UCSR0A & (1<<UDRE0)) == 0x00); 
     490:	5d 9b       	sbis	0x0b, 5	; 11
     492:	fe cf       	rjmp	.-4      	; 0x490 <serial_string+0x4>
}

void serial_string(unsigned char *data)		
{
	while(*data!='\0') {		
		tx_data(*data++);
     494:	31 96       	adiw	r30, 0x01	; 1
}

void tx_data (unsigned char data) 
{
	while((UCSR0A & (1<<UDRE0)) == 0x00); 
    UDR0 = data;
     496:	8c b9       	out	0x0c, r24	; 12
	pData[1] = pData[1]>>2;	// 온도
}

void serial_string(unsigned char *data)		
{
	while(*data!='\0') {		
     498:	80 81       	ld	r24, Z
     49a:	88 23       	and	r24, r24
     49c:	c9 f7       	brne	.-14     	; 0x490 <serial_string+0x4>
		tx_data(*data++);
	}						
}
     49e:	08 95       	ret

000004a0 <debug_string>:

void debug_string(unsigned char *data)		
{
     4a0:	fc 01       	movw	r30, r24
     4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <debug_string+0x12>
    UDR0 = data;
}

void debug_data (unsigned char data) 
{
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
     4a4:	80 91 9b 00 	lds	r24, 0x009B
     4a8:	85 ff       	sbrs	r24, 5
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <debug_string+0x4>
}

void debug_string(unsigned char *data)		
{
	while(*data!='\0') {		
		debug_data(*data++);
     4ac:	31 96       	adiw	r30, 0x01	; 1
}

void debug_data (unsigned char data) 
{
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
    UDR1 = data;
     4ae:	90 93 9c 00 	sts	0x009C, r25
	}						
}

void debug_string(unsigned char *data)		
{
	while(*data!='\0') {		
     4b2:	90 81       	ld	r25, Z
     4b4:	99 23       	and	r25, r25
     4b6:	b1 f7       	brne	.-20     	; 0x4a4 <debug_string+0x4>
		debug_data(*data++);
	}						
}
     4b8:	08 95       	ret

000004ba <CRC>:
// Item1: 연산 자료 버퍼
// Item2: 자료 갯수
// [리턴] 연산결과
// ---------------------------------------------------------------
int CRC(unsigned char buf[], int max_cnt)
{
     4ba:	dc 01       	movw	r26, r24
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <CRC+0x1e>
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
	{
		accum^= buf[i];		// XOR 연산
     4c6:	fd 01       	movw	r30, r26
     4c8:	e4 0f       	add	r30, r20
     4ca:	f5 1f       	adc	r31, r21
     4cc:	80 81       	ld	r24, Z
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	28 27       	eor	r18, r24
     4d2:	39 27       	eor	r19, r25
{
	int i,accum = 0;
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
     4d4:	4f 5f       	subi	r20, 0xFF	; 255
     4d6:	5f 4f       	sbci	r21, 0xFF	; 255
     4d8:	46 17       	cp	r20, r22
     4da:	57 07       	cpc	r21, r23
     4dc:	a4 f3       	brlt	.-24     	; 0x4c6 <CRC+0xc>
     4de:	30 70       	andi	r19, 0x00	; 0
	}
	
	// //printf("accum: %x\r\n", accum&0xff);

	return (accum & 0xff);
}
     4e0:	c9 01       	movw	r24, r18
     4e2:	08 95       	ret

000004e4 <step_count_check>:
	serial_string((unsigned char*) tx_string);
	
}

void step_count_check() {
	if(step_count<10000) {
     4e4:	80 91 de 02 	lds	r24, 0x02DE
     4e8:	90 91 df 02 	lds	r25, 0x02DF
     4ec:	a0 91 e0 02 	lds	r26, 0x02E0
     4f0:	b0 91 e1 02 	lds	r27, 0x02E1
     4f4:	80 51       	subi	r24, 0x10	; 16
     4f6:	97 42       	sbci	r25, 0x27	; 39
     4f8:	a0 40       	sbci	r26, 0x00	; 0
     4fa:	b0 40       	sbci	r27, 0x00	; 0
     4fc:	58 f4       	brcc	.+22     	; 0x514 <step_count_check+0x30>
		step_count=0;
     4fe:	10 92 de 02 	sts	0x02DE, r1
     502:	10 92 df 02 	sts	0x02DF, r1
     506:	10 92 e0 02 	sts	0x02E0, r1
     50a:	10 92 e1 02 	sts	0x02E1, r1
		debug_string((unsigned char * )"\rstep_count init 0\n");
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	7a c0       	rjmp	.+244    	; 0x608 <step_count_check+0x124>
	}

	else if( (40000 < step_count) && (step_count < 60000)) {
     514:	80 91 de 02 	lds	r24, 0x02DE
     518:	90 91 df 02 	lds	r25, 0x02DF
     51c:	a0 91 e0 02 	lds	r26, 0x02E0
     520:	b0 91 e1 02 	lds	r27, 0x02E1
     524:	81 54       	subi	r24, 0x41	; 65
     526:	9c 49       	sbci	r25, 0x9C	; 156
     528:	a0 40       	sbci	r26, 0x00	; 0
     52a:	b0 40       	sbci	r27, 0x00	; 0
     52c:	e0 f0       	brcs	.+56     	; 0x566 <step_count_check+0x82>
     52e:	80 91 de 02 	lds	r24, 0x02DE
     532:	90 91 df 02 	lds	r25, 0x02DF
     536:	a0 91 e0 02 	lds	r26, 0x02E0
     53a:	b0 91 e1 02 	lds	r27, 0x02E1
     53e:	80 56       	subi	r24, 0x60	; 96
     540:	9a 4e       	sbci	r25, 0xEA	; 234
     542:	a0 40       	sbci	r26, 0x00	; 0
     544:	b0 40       	sbci	r27, 0x00	; 0
     546:	78 f4       	brcc	.+30     	; 0x566 <step_count_check+0x82>
		step_count=50000;
     548:	80 e5       	ldi	r24, 0x50	; 80
     54a:	93 ec       	ldi	r25, 0xC3	; 195
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	80 93 de 02 	sts	0x02DE, r24
     554:	90 93 df 02 	sts	0x02DF, r25
     558:	a0 93 e0 02 	sts	0x02E0, r26
     55c:	b0 93 e1 02 	sts	0x02E1, r27
		debug_string((unsigned char * )"\rstep_count init 50000\n");
     560:	84 e1       	ldi	r24, 0x14	; 20
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	51 c0       	rjmp	.+162    	; 0x608 <step_count_check+0x124>
	}
	

	else if(( 90000<step_count) && (step_count<110000) ) {
     566:	80 91 de 02 	lds	r24, 0x02DE
     56a:	90 91 df 02 	lds	r25, 0x02DF
     56e:	a0 91 e0 02 	lds	r26, 0x02E0
     572:	b0 91 e1 02 	lds	r27, 0x02E1
     576:	81 59       	subi	r24, 0x91	; 145
     578:	9f 45       	sbci	r25, 0x5F	; 95
     57a:	a1 40       	sbci	r26, 0x01	; 1
     57c:	b0 40       	sbci	r27, 0x00	; 0
     57e:	e0 f0       	brcs	.+56     	; 0x5b8 <step_count_check+0xd4>
     580:	80 91 de 02 	lds	r24, 0x02DE
     584:	90 91 df 02 	lds	r25, 0x02DF
     588:	a0 91 e0 02 	lds	r26, 0x02E0
     58c:	b0 91 e1 02 	lds	r27, 0x02E1
     590:	80 5b       	subi	r24, 0xB0	; 176
     592:	9d 4a       	sbci	r25, 0xAD	; 173
     594:	a1 40       	sbci	r26, 0x01	; 1
     596:	b0 40       	sbci	r27, 0x00	; 0
     598:	78 f4       	brcc	.+30     	; 0x5b8 <step_count_check+0xd4>
		step_count=100000;
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	96 e8       	ldi	r25, 0x86	; 134
     59e:	a1 e0       	ldi	r26, 0x01	; 1
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	80 93 de 02 	sts	0x02DE, r24
     5a6:	90 93 df 02 	sts	0x02DF, r25
     5aa:	a0 93 e0 02 	sts	0x02E0, r26
     5ae:	b0 93 e1 02 	sts	0x02E1, r27
		debug_string((unsigned char * )"\rstep_count init 100000\n");
     5b2:	8c e2       	ldi	r24, 0x2C	; 44
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	28 c0       	rjmp	.+80     	; 0x608 <step_count_check+0x124>
	}
	
	else if( (140000<step_count)  && (step_count<160000) ) {
     5b8:	80 91 de 02 	lds	r24, 0x02DE
     5bc:	90 91 df 02 	lds	r25, 0x02DF
     5c0:	a0 91 e0 02 	lds	r26, 0x02E0
     5c4:	b0 91 e1 02 	lds	r27, 0x02E1
     5c8:	81 5e       	subi	r24, 0xE1	; 225
     5ca:	92 42       	sbci	r25, 0x22	; 34
     5cc:	a2 40       	sbci	r26, 0x02	; 2
     5ce:	b0 40       	sbci	r27, 0x00	; 0
     5d0:	f0 f0       	brcs	.+60     	; 0x60e <step_count_check+0x12a>
     5d2:	80 91 de 02 	lds	r24, 0x02DE
     5d6:	90 91 df 02 	lds	r25, 0x02DF
     5da:	a0 91 e0 02 	lds	r26, 0x02E0
     5de:	b0 91 e1 02 	lds	r27, 0x02E1
     5e2:	80 50       	subi	r24, 0x00	; 0
     5e4:	91 47       	sbci	r25, 0x71	; 113
     5e6:	a2 40       	sbci	r26, 0x02	; 2
     5e8:	b0 40       	sbci	r27, 0x00	; 0
     5ea:	88 f4       	brcc	.+34     	; 0x60e <step_count_check+0x12a>
		step_count=150000;
     5ec:	80 ef       	ldi	r24, 0xF0	; 240
     5ee:	99 e4       	ldi	r25, 0x49	; 73
     5f0:	a2 e0       	ldi	r26, 0x02	; 2
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	80 93 de 02 	sts	0x02DE, r24
     5f8:	90 93 df 02 	sts	0x02DF, r25
     5fc:	a0 93 e0 02 	sts	0x02E0, r26
     600:	b0 93 e1 02 	sts	0x02E1, r27
		debug_string((unsigned char * )"\rstep_count init 150000\n");
     604:	85 e4       	ldi	r24, 0x45	; 69
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 50 02 	call	0x4a0	; 0x4a0 <debug_string>
     60c:	08 95       	ret
	}
	
	else if( (190000<step_count) && (step_count<210000) ) {
     60e:	80 91 de 02 	lds	r24, 0x02DE
     612:	90 91 df 02 	lds	r25, 0x02DF
     616:	a0 91 e0 02 	lds	r26, 0x02E0
     61a:	b0 91 e1 02 	lds	r27, 0x02E1
     61e:	81 53       	subi	r24, 0x31	; 49
     620:	96 4e       	sbci	r25, 0xE6	; 230
     622:	a2 40       	sbci	r26, 0x02	; 2
     624:	b0 40       	sbci	r27, 0x00	; 0
     626:	e8 f0       	brcs	.+58     	; 0x662 <step_count_check+0x17e>
     628:	80 91 de 02 	lds	r24, 0x02DE
     62c:	90 91 df 02 	lds	r25, 0x02DF
     630:	a0 91 e0 02 	lds	r26, 0x02E0
     634:	b0 91 e1 02 	lds	r27, 0x02E1
     638:	80 55       	subi	r24, 0x50	; 80
     63a:	94 43       	sbci	r25, 0x34	; 52
     63c:	a3 40       	sbci	r26, 0x03	; 3
     63e:	b0 40       	sbci	r27, 0x00	; 0
     640:	80 f4       	brcc	.+32     	; 0x662 <step_count_check+0x17e>
		step_count=200000;
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	9d e0       	ldi	r25, 0x0D	; 13
     646:	a3 e0       	ldi	r26, 0x03	; 3
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	80 93 de 02 	sts	0x02DE, r24
     64e:	90 93 df 02 	sts	0x02DF, r25
     652:	a0 93 e0 02 	sts	0x02E0, r26
     656:	b0 93 e1 02 	sts	0x02E1, r27
		debug_string((unsigned char * )"\rstep_count init 200000\n");
     65a:	8e e5       	ldi	r24, 0x5E	; 94
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <debug_string>
     662:	08 95       	ret

00000664 <send_protocol>:

	return (accum & 0xff);
}


void send_protocol(char command, char ack_nack){
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	ac 97       	sbiw	r28, 0x2c	; 44
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	16 2f       	mov	r17, r22

	volatile unsigned char tx_string[30];	// data from server, end with '\0'	
	volatile int i = 0, crc = 0;
     67e:	1a 82       	std	Y+2, r1	; 0x02
     680:	19 82       	std	Y+1, r1	; 0x01
     682:	1c 82       	std	Y+4, r1	; 0x04
     684:	1b 82       	std	Y+3, r1	; 0x03
	volatile char buf[10];
	// serial_string("test avr tx data");
	
	tx_string[i++] = STX;
     686:	29 81       	ldd	r18, Y+1	; 0x01
     688:	3a 81       	ldd	r19, Y+2	; 0x02
     68a:	de 01       	movw	r26, r28
     68c:	1f 96       	adiw	r26, 0x0f	; 15
     68e:	fd 01       	movw	r30, r26
     690:	e2 0f       	add	r30, r18
     692:	f3 1f       	adc	r31, r19
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	90 83       	st	Z, r25
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	3a 83       	std	Y+2, r19	; 0x02
     69e:	29 83       	std	Y+1, r18	; 0x01
	tx_string[i++] = ':';	
     6a0:	29 81       	ldd	r18, Y+1	; 0x01
     6a2:	3a 81       	ldd	r19, Y+2	; 0x02
     6a4:	fd 01       	movw	r30, r26
     6a6:	e2 0f       	add	r30, r18
     6a8:	f3 1f       	adc	r31, r19
     6aa:	4a e3       	ldi	r20, 0x3A	; 58
     6ac:	40 83       	st	Z, r20
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	3a 83       	std	Y+2, r19	; 0x02
     6b4:	29 83       	std	Y+1, r18	; 0x01
	tx_string[i++] = command;
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	fd 01       	movw	r30, r26
     6bc:	e2 0f       	add	r30, r18
     6be:	f3 1f       	adc	r31, r19
     6c0:	80 83       	st	Z, r24
     6c2:	2f 5f       	subi	r18, 0xFF	; 255
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	3a 83       	std	Y+2, r19	; 0x02
     6c8:	29 83       	std	Y+1, r18	; 0x01
	tx_string[i++] = ':';	
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	fd 01       	movw	r30, r26
     6d0:	e8 0f       	add	r30, r24
     6d2:	f9 1f       	adc	r31, r25
     6d4:	40 83       	st	Z, r20
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	9a 83       	std	Y+2, r25	; 0x02
     6da:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = DEVICE_ID;
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	fd 01       	movw	r30, r26
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	21 e3       	ldi	r18, 0x31	; 49
     6e8:	20 83       	st	Z, r18
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	9a 83       	std	Y+2, r25	; 0x02
     6ee:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = ':';	
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	a8 0f       	add	r26, r24
     6f6:	b9 1f       	adc	r27, r25
     6f8:	4c 93       	st	X, r20
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
	
	// step count
	sprintf(buf, "%08lX", step_count);
     700:	20 91 de 02 	lds	r18, 0x02DE
     704:	30 91 df 02 	lds	r19, 0x02DF
     708:	40 91 e0 02 	lds	r20, 0x02E0
     70c:	50 91 e1 02 	lds	r21, 0x02E1
     710:	8d b7       	in	r24, 0x3d	; 61
     712:	9e b7       	in	r25, 0x3e	; 62
     714:	08 97       	sbiw	r24, 0x08	; 8
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	9e bf       	out	0x3e, r25	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	8d bf       	out	0x3d, r24	; 61
     720:	ed b7       	in	r30, 0x3d	; 61
     722:	fe b7       	in	r31, 0x3e	; 62
     724:	31 96       	adiw	r30, 0x01	; 1
     726:	ce 01       	movw	r24, r28
     728:	05 96       	adiw	r24, 0x05	; 5
     72a:	ad b7       	in	r26, 0x3d	; 61
     72c:	be b7       	in	r27, 0x3e	; 62
     72e:	12 96       	adiw	r26, 0x02	; 2
     730:	9c 93       	st	X, r25
     732:	8e 93       	st	-X, r24
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	87 e7       	ldi	r24, 0x77	; 119
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	93 83       	std	Z+3, r25	; 0x03
     73c:	82 83       	std	Z+2, r24	; 0x02
     73e:	24 83       	std	Z+4, r18	; 0x04
     740:	35 83       	std	Z+5, r19	; 0x05
     742:	46 83       	std	Z+6, r20	; 0x06
     744:	57 83       	std	Z+7, r21	; 0x07
     746:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <sprintf>
     74a:	8d b7       	in	r24, 0x3d	; 61
     74c:	9e b7       	in	r25, 0x3e	; 62
     74e:	08 96       	adiw	r24, 0x08	; 8
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	9e bf       	out	0x3e, r25	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	8d bf       	out	0x3d, r24	; 61
    UDR0 = data;
}

void debug_data (unsigned char data) 
{
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
     75a:	80 91 9b 00 	lds	r24, 0x009B
     75e:	85 ff       	sbrs	r24, 5
     760:	fc cf       	rjmp	.-8      	; 0x75a <send_protocol+0xf6>
    UDR1 = data;
     762:	8d e0       	ldi	r24, 0x0D	; 13
     764:	80 93 9c 00 	sts	0x009C, r24
	
	// step count
	sprintf(buf, "%08lX", step_count);
	
	debug_data('\r');
	debug_string((unsigned char*) buf);
     768:	ce 01       	movw	r24, r28
     76a:	05 96       	adiw	r24, 0x05	; 5
     76c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <debug_string>
    UDR0 = data;
}

void debug_data (unsigned char data) 
{
	while((UCSR1A & (1<<UDRE1)) == 0x00); 
     770:	80 91 9b 00 	lds	r24, 0x009B
     774:	85 ff       	sbrs	r24, 5
     776:	fc cf       	rjmp	.-8      	; 0x770 <send_protocol+0x10c>
    UDR1 = data;
     778:	8d e0       	ldi	r24, 0x0D	; 13
     77a:	80 93 9c 00 	sts	0x009C, r24
	
	debug_data('\r');
	debug_string((unsigned char*) buf);
	debug_data('\r');
	
	if( ack_nack == ACK ) {
     77e:	18 33       	cpi	r17, 0x38	; 56
     780:	09 f0       	breq	.+2      	; 0x784 <send_protocol+0x120>
     782:	60 c0       	rjmp	.+192    	; 0x844 <send_protocol+0x1e0>
		if( COMMAND == '1' ) {
     784:	80 91 cb 01 	lds	r24, 0x01CB
     788:	81 33       	cpi	r24, 0x31	; 49
     78a:	09 f0       	breq	.+2      	; 0x78e <send_protocol+0x12a>
     78c:	5b c0       	rjmp	.+182    	; 0x844 <send_protocol+0x1e0>
			
			tx_string[i++] = buf[0];		//send step_count by hexcode
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	2d 81       	ldd	r18, Y+5	; 0x05
     794:	de 01       	movw	r26, r28
     796:	1f 96       	adiw	r26, 0x0f	; 15
     798:	fd 01       	movw	r30, r26
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	20 83       	st	Z, r18
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[1];
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	2e 81       	ldd	r18, Y+6	; 0x06
     7ac:	fd 01       	movw	r30, r26
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	20 83       	st	Z, r18
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[2];
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	2f 81       	ldd	r18, Y+7	; 0x07
     7c0:	fd 01       	movw	r30, r26
     7c2:	e8 0f       	add	r30, r24
     7c4:	f9 1f       	adc	r31, r25
     7c6:	20 83       	st	Z, r18
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[3];
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	28 85       	ldd	r18, Y+8	; 0x08
     7d4:	fd 01       	movw	r30, r26
     7d6:	e8 0f       	add	r30, r24
     7d8:	f9 1f       	adc	r31, r25
     7da:	20 83       	st	Z, r18
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	9a 83       	std	Y+2, r25	; 0x02
     7e0:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[4];
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	29 85       	ldd	r18, Y+9	; 0x09
     7e8:	fd 01       	movw	r30, r26
     7ea:	e8 0f       	add	r30, r24
     7ec:	f9 1f       	adc	r31, r25
     7ee:	20 83       	st	Z, r18
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[5];
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	2a 85       	ldd	r18, Y+10	; 0x0a
     7fc:	fd 01       	movw	r30, r26
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	20 83       	st	Z, r18
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[6];
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	2b 85       	ldd	r18, Y+11	; 0x0b
     810:	fd 01       	movw	r30, r26
     812:	e8 0f       	add	r30, r24
     814:	f9 1f       	adc	r31, r25
     816:	20 83       	st	Z, r18
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
			tx_string[i++] = buf[7];
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	2c 85       	ldd	r18, Y+12	; 0x0c
     824:	fd 01       	movw	r30, r26
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	20 83       	st	Z, r18
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
			
			tx_string[i++] = ':';
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	a8 0f       	add	r26, r24
     838:	b9 1f       	adc	r27, r25
     83a:	2a e3       	ldi	r18, 0x3A	; 58
     83c:	2c 93       	st	X, r18
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
			
		}
		
	}
	
	tx_string[i++] = ack_nack; 
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	ae 01       	movw	r20, r28
     84a:	41 5f       	subi	r20, 0xF1	; 241
     84c:	5f 4f       	sbci	r21, 0xFF	; 255
     84e:	fa 01       	movw	r30, r20
     850:	e8 0f       	add	r30, r24
     852:	f9 1f       	adc	r31, r25
     854:	10 83       	st	Z, r17
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = ':';
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	fa 01       	movw	r30, r20
     862:	e8 0f       	add	r30, r24
     864:	f9 1f       	adc	r31, r25
     866:	2a e3       	ldi	r18, 0x3A	; 58
     868:	20 83       	st	Z, r18
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01
	
	// crc value
	crc = CRC((unsigned char*)tx_string, i );
     870:	a9 81       	ldd	r26, Y+1	; 0x01
     872:	ba 81       	ldd	r27, Y+2	; 0x02
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	8a 01       	movw	r16, r20
     87e:	09 c0       	rjmp	.+18     	; 0x892 <send_protocol+0x22e>
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
	{
		accum^= buf[i];		// XOR 연산
     880:	f8 01       	movw	r30, r16
     882:	e2 0f       	add	r30, r18
     884:	f3 1f       	adc	r31, r19
     886:	80 81       	ld	r24, Z
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	68 27       	eor	r22, r24
     88c:	79 27       	eor	r23, r25
{
	int i,accum = 0;
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	2a 17       	cp	r18, r26
     894:	3b 07       	cpc	r19, r27
     896:	a4 f3       	brlt	.-24     	; 0x880 <send_protocol+0x21c>
		// //printf("CRC buf[%d]: %c\r\n", i, buf[i]);
	}
	
	// //printf("accum: %x\r\n", accum&0xff);

	return (accum & 0xff);
     898:	70 70       	andi	r23, 0x00	; 0
	
	tx_string[i++] = ack_nack; 
	tx_string[i++] = ':';
	
	// crc value
	crc = CRC((unsigned char*)tx_string, i );
     89a:	7c 83       	std	Y+4, r23	; 0x04
     89c:	6b 83       	std	Y+3, r22	; 0x03
	sprintf(buf,"%02X", crc&0xff);
     89e:	2b 81       	ldd	r18, Y+3	; 0x03
     8a0:	3c 81       	ldd	r19, Y+4	; 0x04
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <send_protocol+0x240>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <send_protocol+0x242>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <send_protocol+0x244>
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	31 96       	adiw	r30, 0x01	; 1
     8ae:	ce 01       	movw	r24, r28
     8b0:	05 96       	adiw	r24, 0x05	; 5
     8b2:	ad b7       	in	r26, 0x3d	; 61
     8b4:	be b7       	in	r27, 0x3e	; 62
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	9c 93       	st	X, r25
     8ba:	8e 93       	st	-X, r24
     8bc:	11 97       	sbiw	r26, 0x01	; 1
     8be:	8d e7       	ldi	r24, 0x7D	; 125
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	93 83       	std	Z+3, r25	; 0x03
     8c4:	82 83       	std	Z+2, r24	; 0x02
     8c6:	30 70       	andi	r19, 0x00	; 0
     8c8:	35 83       	std	Z+5, r19	; 0x05
     8ca:	24 83       	std	Z+4, r18	; 0x04
     8cc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <sprintf>
	
	tx_string[i++] = buf[0];
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	2d 81       	ldd	r18, Y+5	; 0x05
     8d6:	f8 01       	movw	r30, r16
     8d8:	e8 0f       	add	r30, r24
     8da:	f9 1f       	adc	r31, r25
     8dc:	20 83       	st	Z, r18
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = buf[1];
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	2e 81       	ldd	r18, Y+6	; 0x06
     8ea:	f8 01       	movw	r30, r16
     8ec:	e8 0f       	add	r30, r24
     8ee:	f9 1f       	adc	r31, r25
     8f0:	20 83       	st	Z, r18
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = ':';
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	f8 01       	movw	r30, r16
     8fe:	e8 0f       	add	r30, r24
     900:	f9 1f       	adc	r31, r25
     902:	3a e3       	ldi	r19, 0x3A	; 58
     904:	30 83       	st	Z, r19
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = ETX;
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	f8 01       	movw	r30, r16
     912:	e8 0f       	add	r30, r24
     914:	f9 1f       	adc	r31, r25
     916:	23 e0       	ldi	r18, 0x03	; 3
     918:	20 83       	st	Z, r18
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	9a 83       	std	Y+2, r25	; 0x02
     91e:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i++] = ':';
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	f8 01       	movw	r30, r16
     926:	e8 0f       	add	r30, r24
     928:	f9 1f       	adc	r31, r25
     92a:	30 83       	st	Z, r19
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
	tx_string[i] = '\0';
     932:	e9 81       	ldd	r30, Y+1	; 0x01
     934:	fa 81       	ldd	r31, Y+2	; 0x02
     936:	e0 0f       	add	r30, r16
     938:	f1 1f       	adc	r31, r17
     93a:	10 82       	st	Z, r1

	// debug_string((unsigned char*) tx_string);
	serial_string((unsigned char*) tx_string);
     93c:	8d b7       	in	r24, 0x3d	; 61
     93e:	9e b7       	in	r25, 0x3e	; 62
     940:	06 96       	adiw	r24, 0x06	; 6
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	9e bf       	out	0x3e, r25	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	8d bf       	out	0x3d, r24	; 61
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 46 02 	call	0x48c	; 0x48c <serial_string>
	
}
     952:	ac 96       	adiw	r28, 0x2c	; 44
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	cf 91       	pop	r28
     960:	df 91       	pop	r29
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <__vector_1>:
    }
	_delay_ms( Step_speed );
}

ISR(INT0_vect)	
{
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	0f 92       	push	r0
     970:	0b b6       	in	r0, 0x3b	; 59
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	
	send_protocol('1', ACK);
     98e:	81 e3       	ldi	r24, 0x31	; 49
     990:	68 e3       	ldi	r22, 0x38	; 56
     992:	0e 94 32 03 	call	0x664	; 0x664 <send_protocol>
	_delay_ms(10);	
	*/
	//_delay_ms(20);	
	//EIFR = 0x01;	// EIFR = (1<<INTF0); 플래그 리셋 (다시 INT0으로 진입하는걸 피하기 위해)

}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0b be       	out	0x3b, r0	; 59
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <server_parsing>:
	//printf("\rserver parsing function end \r");
		
}
*/

int server_parsing( unsigned char *pData ) {
     9bc:	af 92       	push	r10
     9be:	bf 92       	push	r11
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	df 93       	push	r29
     9ce:	cf 93       	push	r28
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	a8 97       	sbiw	r28, 0x28	; 40
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	dc 01       	movw	r26, r24

	int i=0,j=0;
	colon_cnt = 0;
     9e2:	10 92 f2 02 	sts	0x02F2, r1
     9e6:	10 92 f1 02 	sts	0x02F1, r1
	unsigned char step_cnt_str[4][10];
		
	COMMAND = pData[2];
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	8c 91       	ld	r24, X
     9ee:	12 97       	sbiw	r26, 0x02	; 2
     9f0:	80 93 cb 01 	sts	0x01CB, r24
	
	switch( COMMAND ) {
     9f4:	81 33       	cpi	r24, 0x31	; 49
     9f6:	d1 f0       	breq	.+52     	; 0xa2c <server_parsing+0x70>
     9f8:	82 33       	cpi	r24, 0x32	; 50
     9fa:	09 f0       	breq	.+2      	; 0x9fe <server_parsing+0x42>
     9fc:	c5 c0       	rjmp	.+394    	; 0xb88 <server_parsing+0x1cc>
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
								// ID4
								car_info[3].id = pData[i];
							}
							else if( colon_cnt == 8 ) {
								// ID4 Step Count
								step_cnt_str[3][j++] = pData[i];
     a06:	ef e1       	ldi	r30, 0x1F	; 31
     a08:	ae 2e       	mov	r10, r30
     a0a:	b1 2c       	mov	r11, r1
     a0c:	ac 0e       	add	r10, r28
     a0e:	bd 1e       	adc	r11, r29
								// ID3
								car_info[2].id = pData[i];
							}
							else if( colon_cnt == 6 ) {
								// ID3 Step Count
								step_cnt_str[2][j++] = pData[i];
     a10:	55 e1       	ldi	r21, 0x15	; 21
     a12:	c5 2e       	mov	r12, r21
     a14:	d1 2c       	mov	r13, r1
     a16:	cc 0e       	add	r12, r28
     a18:	dd 1e       	adc	r13, r29
								// ID2
								car_info[1].id = pData[i];
							}
							else if( colon_cnt == 4 ) {
								// ID2 Step Count
								step_cnt_str[1][j++] = pData[i];
     a1a:	4b e0       	ldi	r20, 0x0B	; 11
     a1c:	e4 2e       	mov	r14, r20
     a1e:	f1 2c       	mov	r15, r1
     a20:	ec 0e       	add	r14, r28
     a22:	fd 1e       	adc	r15, r29
								// ID1
								car_info[0].id = pData[i];
							}	
							else if( colon_cnt == 2 ) {
								// ID1 Step Count
								step_cnt_str[0][j++] = pData[i];	
     a24:	8e 01       	movw	r16, r28
     a26:	0f 5f       	subi	r16, 0xFF	; 255
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	66 c0       	rjmp	.+204    	; 0xaf8 <server_parsing+0x13c>
		
	COMMAND = pData[2];
	
	switch( COMMAND ) {
	
		case '1': 	ID = pData[4];
     a2c:	14 96       	adiw	r26, 0x04	; 4
     a2e:	8c 91       	ld	r24, X
     a30:	14 97       	sbiw	r26, 0x04	; 4
     a32:	80 93 6d 03 	sts	0x036D, r24
					DIR = pData[6];
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 91       	ld	r24, X
     a3a:	80 93 78 03 	sts	0x0378, r24
     a3e:	a4 c0       	rjmp	.+328    	; 0xb88 <server_parsing+0x1cc>
					break;
					
		case '2': 	// i=3 : index calc
					for( i=3; i < rx_str_len; i++) {
						
						if( pData[i] == ':' ) {
     a40:	fd 01       	movw	r30, r26
     a42:	e6 0f       	add	r30, r22
     a44:	f7 1f       	adc	r31, r23
     a46:	40 81       	ld	r20, Z
     a48:	4a 33       	cpi	r20, 0x3A	; 58
     a4a:	61 f4       	brne	.+24     	; 0xa64 <server_parsing+0xa8>
							colon_cnt++;
     a4c:	80 91 f1 02 	lds	r24, 0x02F1
     a50:	90 91 f2 02 	lds	r25, 0x02F2
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 f2 02 	sts	0x02F2, r25
     a5a:	80 93 f1 02 	sts	0x02F1, r24
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	48 c0       	rjmp	.+144    	; 0xaf4 <server_parsing+0x138>
							j = 0;
						} else {

							if( colon_cnt == 1 ) {
     a64:	80 91 f1 02 	lds	r24, 0x02F1
     a68:	90 91 f2 02 	lds	r25, 0x02F2
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	19 f4       	brne	.+6      	; 0xa76 <server_parsing+0xba>
								// ID1
								car_info[0].id = pData[i];
     a70:	40 93 f5 02 	sts	0x02F5, r20
     a74:	3f c0       	rjmp	.+126    	; 0xaf4 <server_parsing+0x138>
							}	
							else if( colon_cnt == 2 ) {
     a76:	80 91 f1 02 	lds	r24, 0x02F1
     a7a:	90 91 f2 02 	lds	r25, 0x02F2
     a7e:	02 97       	sbiw	r24, 0x02	; 2
     a80:	11 f4       	brne	.+4      	; 0xa86 <server_parsing+0xca>
								// ID1 Step Count
								step_cnt_str[0][j++] = pData[i];	
     a82:	f8 01       	movw	r30, r16
     a84:	32 c0       	rjmp	.+100    	; 0xaea <server_parsing+0x12e>
							}
							else if( colon_cnt == 3 ) {
     a86:	80 91 f1 02 	lds	r24, 0x02F1
     a8a:	90 91 f2 02 	lds	r25, 0x02F2
     a8e:	03 97       	sbiw	r24, 0x03	; 3
     a90:	19 f4       	brne	.+6      	; 0xa98 <server_parsing+0xdc>
								// ID2
								car_info[1].id = pData[i];
     a92:	40 93 fa 02 	sts	0x02FA, r20
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <server_parsing+0x138>
							}
							else if( colon_cnt == 4 ) {
     a98:	80 91 f1 02 	lds	r24, 0x02F1
     a9c:	90 91 f2 02 	lds	r25, 0x02F2
     aa0:	04 97       	sbiw	r24, 0x04	; 4
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <server_parsing+0xec>
								// ID2 Step Count
								step_cnt_str[1][j++] = pData[i];
     aa4:	f7 01       	movw	r30, r14
     aa6:	21 c0       	rjmp	.+66     	; 0xaea <server_parsing+0x12e>
																
							} else if( colon_cnt == 5 ) {
     aa8:	80 91 f1 02 	lds	r24, 0x02F1
     aac:	90 91 f2 02 	lds	r25, 0x02F2
     ab0:	05 97       	sbiw	r24, 0x05	; 5
     ab2:	19 f4       	brne	.+6      	; 0xaba <server_parsing+0xfe>
								// ID3
								car_info[2].id = pData[i];
     ab4:	40 93 ff 02 	sts	0x02FF, r20
     ab8:	1d c0       	rjmp	.+58     	; 0xaf4 <server_parsing+0x138>
							}
							else if( colon_cnt == 6 ) {
     aba:	80 91 f1 02 	lds	r24, 0x02F1
     abe:	90 91 f2 02 	lds	r25, 0x02F2
     ac2:	06 97       	sbiw	r24, 0x06	; 6
     ac4:	11 f4       	brne	.+4      	; 0xaca <server_parsing+0x10e>
								// ID3 Step Count
								step_cnt_str[2][j++] = pData[i];
     ac6:	f6 01       	movw	r30, r12
     ac8:	10 c0       	rjmp	.+32     	; 0xaea <server_parsing+0x12e>
																
							}else if( colon_cnt == 7 ) {
     aca:	80 91 f1 02 	lds	r24, 0x02F1
     ace:	90 91 f2 02 	lds	r25, 0x02F2
     ad2:	07 97       	sbiw	r24, 0x07	; 7
     ad4:	19 f4       	brne	.+6      	; 0xadc <server_parsing+0x120>
								// ID4
								car_info[3].id = pData[i];
     ad6:	40 93 04 03 	sts	0x0304, r20
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <server_parsing+0x138>
							}
							else if( colon_cnt == 8 ) {
     adc:	80 91 f1 02 	lds	r24, 0x02F1
     ae0:	90 91 f2 02 	lds	r25, 0x02F2
     ae4:	08 97       	sbiw	r24, 0x08	; 8
     ae6:	31 f4       	brne	.+12     	; 0xaf4 <server_parsing+0x138>
								// ID4 Step Count
								step_cnt_str[3][j++] = pData[i];
     ae8:	f5 01       	movw	r30, r10
     aea:	e2 0f       	add	r30, r18
     aec:	f3 1f       	adc	r31, r19
     aee:	40 83       	st	Z, r20
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
		case '1': 	ID = pData[4];
					DIR = pData[6];
					break;
					
		case '2': 	// i=3 : index calc
					for( i=3; i < rx_str_len; i++) {
     af4:	6f 5f       	subi	r22, 0xFF	; 255
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
     af8:	80 91 ed 02 	lds	r24, 0x02ED
     afc:	90 91 ee 02 	lds	r25, 0x02EE
     b00:	68 17       	cp	r22, r24
     b02:	79 07       	cpc	r23, r25
     b04:	0c f4       	brge	.+2      	; 0xb08 <server_parsing+0x14c>
     b06:	9c cf       	rjmp	.-200    	; 0xa40 <server_parsing+0x84>
							}
						}
					}
					
					// step count ascii to intger
					car_info[0].step_cnt = (unsigned long)atoi((char*)(&(step_cnt_str[0])));
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <atoi>
     b10:	aa 27       	eor	r26, r26
     b12:	97 fd       	sbrc	r25, 7
     b14:	a0 95       	com	r26
     b16:	ba 2f       	mov	r27, r26
     b18:	80 93 f6 02 	sts	0x02F6, r24
     b1c:	90 93 f7 02 	sts	0x02F7, r25
     b20:	a0 93 f8 02 	sts	0x02F8, r26
     b24:	b0 93 f9 02 	sts	0x02F9, r27
					car_info[1].step_cnt = (unsigned long)atoi((char*)(&(step_cnt_str[1])));
     b28:	ce 01       	movw	r24, r28
     b2a:	0b 96       	adiw	r24, 0x0b	; 11
     b2c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <atoi>
     b30:	aa 27       	eor	r26, r26
     b32:	97 fd       	sbrc	r25, 7
     b34:	a0 95       	com	r26
     b36:	ba 2f       	mov	r27, r26
     b38:	80 93 fb 02 	sts	0x02FB, r24
     b3c:	90 93 fc 02 	sts	0x02FC, r25
     b40:	a0 93 fd 02 	sts	0x02FD, r26
     b44:	b0 93 fe 02 	sts	0x02FE, r27
					car_info[2].step_cnt = (unsigned long)atoi((char*)(&(step_cnt_str[2])));
     b48:	ce 01       	movw	r24, r28
     b4a:	45 96       	adiw	r24, 0x15	; 21
     b4c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <atoi>
     b50:	aa 27       	eor	r26, r26
     b52:	97 fd       	sbrc	r25, 7
     b54:	a0 95       	com	r26
     b56:	ba 2f       	mov	r27, r26
     b58:	80 93 00 03 	sts	0x0300, r24
     b5c:	90 93 01 03 	sts	0x0301, r25
     b60:	a0 93 02 03 	sts	0x0302, r26
     b64:	b0 93 03 03 	sts	0x0303, r27
					car_info[3].step_cnt = (unsigned long)atoi((char*)(&(step_cnt_str[3])));
     b68:	ce 01       	movw	r24, r28
     b6a:	4f 96       	adiw	r24, 0x1f	; 31
     b6c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <atoi>
     b70:	aa 27       	eor	r26, r26
     b72:	97 fd       	sbrc	r25, 7
     b74:	a0 95       	com	r26
     b76:	ba 2f       	mov	r27, r26
     b78:	80 93 05 03 	sts	0x0305, r24
     b7c:	90 93 06 03 	sts	0x0306, r25
     b80:	a0 93 07 03 	sts	0x0307, r26
     b84:	b0 93 08 03 	sts	0x0308, r27
	return 1;

	//printf("\rbuf[0]: %c, buf[1]: %c\r", buf[0], buf[1]);
	//printf("\rserver parsing function end \r");
		
}
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a8 96       	adiw	r28, 0x28	; 40
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	08 95       	ret

00000bae <main>:
		step_count=200000;
		debug_string((unsigned char * )"\rstep_count init 200000\n");
	}		
}

void main() {
     bae:	4f 92       	push	r4
     bb0:	5f 92       	push	r5
     bb2:	6f 92       	push	r6
     bb4:	7f 92       	push	r7
     bb6:	8f 92       	push	r8
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <main+0x22>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <main+0x24>
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	*/
	// unsigned int adc_result[AD_CHANNEL];
	int parse_result=0, crc = 0;
	char buf[4];
	
	state = STX_STATE;
     bd6:	10 92 79 03 	sts	0x0379, r1
		
	device_init();
     bda:	0e 94 f6 01 	call	0x3ec	; 0x3ec <device_init>
	// serial_string((unsigned char*)"\rtest avr data\r");
	debug_string((unsigned char*)"\ravr init ok\r");
     bde:	82 e8       	ldi	r24, 0x82	; 130
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <debug_string>

	idx=0;
     be6:	10 92 db 02 	sts	0x02DB, r1
     bea:	10 92 da 02 	sts	0x02DA, r1
	DIR = STOP;
     bee:	83 e5       	ldi	r24, 0x53	; 83
     bf0:	80 93 78 03 	sts	0x0378, r24
    Step_speed = 20;
     bf4:	84 e1       	ldi	r24, 0x14	; 20
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 dd 02 	sts	0x02DD, r25
     bfc:	80 93 dc 02 	sts	0x02DC, r24
     c00:	20 e9       	ldi	r18, 0x90	; 144
     c02:	62 2e       	mov	r6, r18
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	72 2e       	mov	r7, r18
		*/
		
		if((~PINC & 0x02) == 0x02)
		{
			Step_speed = Step_speed-2;
			if(Step_speed < 2 ) Step_speed=20;
     c08:	04 e1       	ldi	r16, 0x14	; 20
     c0a:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		
		if((~PINC & sw_remote_control) == sw_remote_control)
		{
			DIR = FORWARD;
     c0c:	96 e4       	ldi	r25, 0x46	; 70
     c0e:	49 2e       	mov	r4, r25
			// DEVICE_ID Check
			if( ID == DEVICE_ID ) {
				
				// debug_string((unsigned char * )"\rID Value Agreement\n");
				crc = CRC((unsigned char*)rx_string, rx_str_len-3 );
				sprintf(buf,"%02X", crc&0xff);
     c10:	4e 01       	movw	r8, r28
     c12:	08 94       	sec
     c14:	81 1c       	adc	r8, r1
     c16:	91 1c       	adc	r9, r1
     c18:	8d e7       	ldi	r24, 0x7D	; 125
     c1a:	a8 2e       	mov	r10, r24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	b8 2e       	mov	r11, r24
									} else {
											DIR = STOP;
									}
								}
								else {
									DIR = STOP;
     c20:	b3 e5       	ldi	r27, 0x53	; 83
     c22:	5b 2e       	mov	r5, r27
									distance = car_info[DEVICE_ID-48].step_cnt - step_count;
									
									if ((distance_M < distance) && (distance < distance_H)){
										Step_speed = Step_speed_H;
									} else if((distance_L < distance) && (distance < distance_M)){
										Step_speed = Step_speed_M;
     c24:	ae e0       	ldi	r26, 0x0E	; 14
     c26:	ca 2e       	mov	r12, r26
     c28:	d1 2c       	mov	r13, r1
							    if(	step_count <  car_info[DEVICE_ID-48].step_cnt) {

									distance = car_info[DEVICE_ID-48].step_cnt - step_count;
									
									if ((distance_M < distance) && (distance < distance_H)){
										Step_speed = Step_speed_H;
     c2a:	f5 e0       	ldi	r31, 0x05	; 5
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f1 2c       	mov	r15, r1
			step_count_check();
			step_check_flag = 0;
		}
		*/
		
		if((~PINC & 0x02) == 0x02)
     c30:	99 99       	sbic	0x13, 1	; 19
     c32:	1a c0       	rjmp	.+52     	; 0xc68 <main+0xba>
		{
			Step_speed = Step_speed-2;
     c34:	80 91 dc 02 	lds	r24, 0x02DC
     c38:	90 91 dd 02 	lds	r25, 0x02DD
     c3c:	02 97       	sbiw	r24, 0x02	; 2
     c3e:	90 93 dd 02 	sts	0x02DD, r25
     c42:	80 93 dc 02 	sts	0x02DC, r24
			if(Step_speed < 2 ) Step_speed=20;
     c46:	80 91 dc 02 	lds	r24, 0x02DC
     c4a:	90 91 dd 02 	lds	r25, 0x02DD
     c4e:	02 97       	sbiw	r24, 0x02	; 2
     c50:	24 f4       	brge	.+8      	; 0xc5a <main+0xac>
     c52:	10 93 dd 02 	sts	0x02DD, r17
     c56:	00 93 dc 02 	sts	0x02DC, r16
     c5a:	88 e8       	ldi	r24, 0x88	; 136
     c5c:	93 e1       	ldi	r25, 0x13	; 19
     c5e:	f3 01       	movw	r30, r6
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <main+0xb2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	d9 f7       	brne	.-10     	; 0xc5e <main+0xb0>
			_delay_ms(500);
		}
		
		
		if((~PINC & sw_remote_control) == sw_remote_control)
     c68:	98 99       	sbic	0x13, 0	; 19
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <main+0xc2>
		{
			DIR = FORWARD;
     c6c:	40 92 78 03 	sts	0x0378, r4
			sw_step_motor(Step_speed);
		}
		else
		{
			//DIR = FORWARD;
			sw_step_motor(Step_speed);
     c70:	80 91 dc 02 	lds	r24, 0x02DC
     c74:	90 91 dd 02 	lds	r25, 0x02DD
     c78:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <sw_step_motor>
		

		// debug_string((unsigned char * )"\rwhile syntax\n");
		
		
		if ( rx_eflg == 1 ) {
     c7c:	80 91 e8 02 	lds	r24, 0x02E8
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	b1 f6       	brne	.-84     	; 0xc30 <main+0x82>
			// debug_string((unsigned char * )"\rx eflg == 1\n");
			parse_result = server_parsing((unsigned char*)rx_string);
     c84:	8d e7       	ldi	r24, 0x7D	; 125
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 de 04 	call	0x9bc	; 0x9bc <server_parsing>
			// debug_string((unsigned char * )"\rserver_parsing ok\n");

			// DEVICE_ID Check
			if( ID == DEVICE_ID ) {
     c8c:	80 91 6d 03 	lds	r24, 0x036D
     c90:	81 33       	cpi	r24, 0x31	; 49
     c92:	09 f0       	breq	.+2      	; 0xc96 <main+0xe8>
     c94:	fd c0       	rjmp	.+506    	; 0xe90 <main+0x2e2>
				
				// debug_string((unsigned char * )"\rID Value Agreement\n");
				crc = CRC((unsigned char*)rx_string, rx_str_len-3 );
     c96:	60 91 ed 02 	lds	r22, 0x02ED
     c9a:	70 91 ee 02 	lds	r23, 0x02EE
     c9e:	63 50       	subi	r22, 0x03	; 3
     ca0:	70 40       	sbci	r23, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <main+0x110>
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
	{
		accum^= buf[i];		// XOR 연산
     cac:	f9 01       	movw	r30, r18
     cae:	e3 58       	subi	r30, 0x83	; 131
     cb0:	fc 4f       	sbci	r31, 0xFC	; 252
     cb2:	80 81       	ld	r24, Z
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	48 27       	eor	r20, r24
     cb8:	59 27       	eor	r21, r25
{
	int i,accum = 0;
	
	// //printf("max_cnt: %d\r\n", max_cnt);
	
	for(i=0; i<max_cnt; i++)
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	26 17       	cp	r18, r22
     cc0:	37 07       	cpc	r19, r23
     cc2:	a4 f3       	brlt	.-24     	; 0xcac <main+0xfe>
			// DEVICE_ID Check
			if( ID == DEVICE_ID ) {
				
				// debug_string((unsigned char * )"\rID Value Agreement\n");
				crc = CRC((unsigned char*)rx_string, rx_str_len-3 );
				sprintf(buf,"%02X", crc&0xff);
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <main+0x118>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <main+0x11a>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <main+0x11c>
     cca:	ed b7       	in	r30, 0x3d	; 61
     ccc:	fe b7       	in	r31, 0x3e	; 62
     cce:	31 96       	adiw	r30, 0x01	; 1
     cd0:	ad b7       	in	r26, 0x3d	; 61
     cd2:	be b7       	in	r27, 0x3e	; 62
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	9c 92       	st	X, r9
     cd8:	8e 92       	st	-X, r8
     cda:	11 97       	sbiw	r26, 0x01	; 1
     cdc:	b3 82       	std	Z+3, r11	; 0x03
     cde:	a2 82       	std	Z+2, r10	; 0x02
     ce0:	50 70       	andi	r21, 0x00	; 0
     ce2:	55 83       	std	Z+5, r21	; 0x05
     ce4:	44 83       	std	Z+4, r20	; 0x04
     ce6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <sprintf>
						 
				// CRC Value Check
				if( (buf[0] == rx_string[rx_str_len-3]) && (buf[1] == rx_string[rx_str_len-2]) ) {
     cea:	e0 91 ed 02 	lds	r30, 0x02ED
     cee:	f0 91 ee 02 	lds	r31, 0x02EE
     cf2:	e6 58       	subi	r30, 0x86	; 134
     cf4:	fc 4f       	sbci	r31, 0xFC	; 252
     cf6:	90 81       	ld	r25, Z
     cf8:	2d b7       	in	r18, 0x3d	; 61
     cfa:	3e b7       	in	r19, 0x3e	; 62
     cfc:	2a 5f       	subi	r18, 0xFA	; 250
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	3e bf       	out	0x3e, r19	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	2d bf       	out	0x3d, r18	; 61
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	89 17       	cp	r24, r25
     d0e:	09 f0       	breq	.+2      	; 0xd12 <main+0x164>
     d10:	ac c0       	rjmp	.+344    	; 0xe6a <main+0x2bc>
     d12:	e0 91 ed 02 	lds	r30, 0x02ED
     d16:	f0 91 ee 02 	lds	r31, 0x02EE
     d1a:	e5 58       	subi	r30, 0x85	; 133
     d1c:	fc 4f       	sbci	r31, 0xFC	; 252
     d1e:	90 81       	ld	r25, Z
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	89 17       	cp	r24, r25
     d24:	09 f0       	breq	.+2      	; 0xd28 <main+0x17a>
     d26:	a1 c0       	rjmp	.+322    	; 0xe6a <main+0x2bc>
					// debug_string((unsigned char * )"\rID and CRC Value Agreement\n");
									
					switch(COMMAND) {
     d28:	80 91 cb 01 	lds	r24, 0x01CB
     d2c:	81 33       	cpi	r24, 0x31	; 49
     d2e:	21 f0       	breq	.+8      	; 0xd38 <main+0x18a>
     d30:	82 33       	cpi	r24, 0x32	; 50
     d32:	09 f0       	breq	.+2      	; 0xd36 <main+0x188>
     d34:	ad c0       	rjmp	.+346    	; 0xe90 <main+0x2e2>
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <main+0x1a4>
				
						case '1': 	
									if( DIR == 'F' ) {
     d38:	80 91 78 03 	lds	r24, 0x0378
     d3c:	86 34       	cpi	r24, 0x46	; 70
     d3e:	21 f0       	breq	.+8      	; 0xd48 <main+0x19a>
										DIR = FORWARD;
									} else if ( DIR == 'S' ) {
     d40:	83 35       	cpi	r24, 0x53	; 83
     d42:	11 f4       	brne	.+4      	; 0xd48 <main+0x19a>
										DIR = STOP;
     d44:	80 93 78 03 	sts	0x0378, r24
									}
																		
									send_protocol('1', ACK);
     d48:	81 e3       	ldi	r24, 0x31	; 49
     d4a:	68 e3       	ldi	r22, 0x38	; 56
     d4c:	0e 94 32 03 	call	0x664	; 0x664 <send_protocol>
     d50:	9f c0       	rjmp	.+318    	; 0xe90 <main+0x2e2>
									break;
						case '2': 
						
								DIR = FORWARD;
     d52:	40 92 78 03 	sts	0x0378, r4
															
							    if(	step_count <  car_info[DEVICE_ID-48].step_cnt) {
     d56:	80 91 de 02 	lds	r24, 0x02DE
     d5a:	90 91 df 02 	lds	r25, 0x02DF
     d5e:	a0 91 e0 02 	lds	r26, 0x02E0
     d62:	b0 91 e1 02 	lds	r27, 0x02E1
     d66:	20 91 fb 02 	lds	r18, 0x02FB
     d6a:	30 91 fc 02 	lds	r19, 0x02FC
     d6e:	40 91 fd 02 	lds	r20, 0x02FD
     d72:	50 91 fe 02 	lds	r21, 0x02FE
     d76:	82 17       	cp	r24, r18
     d78:	93 07       	cpc	r25, r19
     d7a:	a4 07       	cpc	r26, r20
     d7c:	b5 07       	cpc	r27, r21
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <main+0x1d4>
     d80:	71 c0       	rjmp	.+226    	; 0xe64 <main+0x2b6>

									distance = car_info[DEVICE_ID-48].step_cnt - step_count;
     d82:	80 91 de 02 	lds	r24, 0x02DE
     d86:	90 91 df 02 	lds	r25, 0x02DF
     d8a:	a0 91 e0 02 	lds	r26, 0x02E0
     d8e:	b0 91 e1 02 	lds	r27, 0x02E1
     d92:	28 1b       	sub	r18, r24
     d94:	39 0b       	sbc	r19, r25
     d96:	4a 0b       	sbc	r20, r26
     d98:	5b 0b       	sbc	r21, r27
     d9a:	20 93 e2 02 	sts	0x02E2, r18
     d9e:	30 93 e3 02 	sts	0x02E3, r19
     da2:	40 93 e4 02 	sts	0x02E4, r20
     da6:	50 93 e5 02 	sts	0x02E5, r21
									
									if ((distance_M < distance) && (distance < distance_H)){
     daa:	80 91 e2 02 	lds	r24, 0x02E2
     dae:	90 91 e3 02 	lds	r25, 0x02E3
     db2:	a0 91 e4 02 	lds	r26, 0x02E4
     db6:	b0 91 e5 02 	lds	r27, 0x02E5
     dba:	89 55       	subi	r24, 0x59	; 89
     dbc:	92 40       	sbci	r25, 0x02	; 2
     dbe:	a0 40       	sbci	r26, 0x00	; 0
     dc0:	b0 40       	sbci	r27, 0x00	; 0
     dc2:	94 f0       	brlt	.+36     	; 0xde8 <main+0x23a>
     dc4:	80 91 e2 02 	lds	r24, 0x02E2
     dc8:	90 91 e3 02 	lds	r25, 0x02E3
     dcc:	a0 91 e4 02 	lds	r26, 0x02E4
     dd0:	b0 91 e5 02 	lds	r27, 0x02E5
     dd4:	88 5e       	subi	r24, 0xE8	; 232
     dd6:	93 40       	sbci	r25, 0x03	; 3
     dd8:	a0 40       	sbci	r26, 0x00	; 0
     dda:	b0 40       	sbci	r27, 0x00	; 0
     ddc:	2c f4       	brge	.+10     	; 0xde8 <main+0x23a>
										Step_speed = Step_speed_H;
     dde:	f0 92 dd 02 	sts	0x02DD, r15
     de2:	e0 92 dc 02 	sts	0x02DC, r14
     de6:	54 c0       	rjmp	.+168    	; 0xe90 <main+0x2e2>
									} else if((distance_L < distance) && (distance < distance_M)){
     de8:	80 91 e2 02 	lds	r24, 0x02E2
     dec:	90 91 e3 02 	lds	r25, 0x02E3
     df0:	a0 91 e4 02 	lds	r26, 0x02E4
     df4:	b0 91 e5 02 	lds	r27, 0x02E5
     df8:	8d 52       	subi	r24, 0x2D	; 45
     dfa:	91 40       	sbci	r25, 0x01	; 1
     dfc:	a0 40       	sbci	r26, 0x00	; 0
     dfe:	b0 40       	sbci	r27, 0x00	; 0
     e00:	94 f0       	brlt	.+36     	; 0xe26 <main+0x278>
     e02:	80 91 e2 02 	lds	r24, 0x02E2
     e06:	90 91 e3 02 	lds	r25, 0x02E3
     e0a:	a0 91 e4 02 	lds	r26, 0x02E4
     e0e:	b0 91 e5 02 	lds	r27, 0x02E5
     e12:	88 55       	subi	r24, 0x58	; 88
     e14:	92 40       	sbci	r25, 0x02	; 2
     e16:	a0 40       	sbci	r26, 0x00	; 0
     e18:	b0 40       	sbci	r27, 0x00	; 0
     e1a:	2c f4       	brge	.+10     	; 0xe26 <main+0x278>
										Step_speed = Step_speed_M;
     e1c:	d0 92 dd 02 	sts	0x02DD, r13
     e20:	c0 92 dc 02 	sts	0x02DC, r12
     e24:	35 c0       	rjmp	.+106    	; 0xe90 <main+0x2e2>
									} else if((0 < distance) && (distance < distance_L)){
     e26:	80 91 e2 02 	lds	r24, 0x02E2
     e2a:	90 91 e3 02 	lds	r25, 0x02E3
     e2e:	a0 91 e4 02 	lds	r26, 0x02E4
     e32:	b0 91 e5 02 	lds	r27, 0x02E5
     e36:	18 16       	cp	r1, r24
     e38:	19 06       	cpc	r1, r25
     e3a:	1a 06       	cpc	r1, r26
     e3c:	1b 06       	cpc	r1, r27
     e3e:	94 f4       	brge	.+36     	; 0xe64 <main+0x2b6>
     e40:	80 91 e2 02 	lds	r24, 0x02E2
     e44:	90 91 e3 02 	lds	r25, 0x02E3
     e48:	a0 91 e4 02 	lds	r26, 0x02E4
     e4c:	b0 91 e5 02 	lds	r27, 0x02E5
     e50:	8c 52       	subi	r24, 0x2C	; 44
     e52:	91 40       	sbci	r25, 0x01	; 1
     e54:	a0 40       	sbci	r26, 0x00	; 0
     e56:	b0 40       	sbci	r27, 0x00	; 0
     e58:	2c f4       	brge	.+10     	; 0xe64 <main+0x2b6>
										Step_speed = Step_speed_L;
     e5a:	10 93 dd 02 	sts	0x02DD, r17
     e5e:	00 93 dc 02 	sts	0x02DC, r16
     e62:	16 c0       	rjmp	.+44     	; 0xe90 <main+0x2e2>
									} else {
											DIR = STOP;
									}
								}
								else {
									DIR = STOP;
     e64:	50 92 78 03 	sts	0x0378, r5
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <main+0x2e2>
				//============================================
				*/	
					// debug_string((unsigned char * )rx_string);

				} else {
					if( COMMAND == '1' ) {
     e6a:	80 91 cb 01 	lds	r24, 0x01CB
     e6e:	81 33       	cpi	r24, 0x31	; 49
     e70:	31 f4       	brne	.+12     	; 0xe7e <main+0x2d0>
						send_protocol('1', NACK);
     e72:	69 e3       	ldi	r22, 0x39	; 57
     e74:	0e 94 32 03 	call	0x664	; 0x664 <send_protocol>
						debug_string((unsigned char * )"\rCommand 1 NACK\n");	
     e78:	80 e9       	ldi	r24, 0x90	; 144
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <main+0x2de>
					} else if( COMMAND == '2' ) {
     e7e:	82 33       	cpi	r24, 0x32	; 50
     e80:	39 f4       	brne	.+14     	; 0xe90 <main+0x2e2>
						send_protocol('2', NACK);
     e82:	69 e3       	ldi	r22, 0x39	; 57
     e84:	0e 94 32 03 	call	0x664	; 0x664 <send_protocol>
						debug_string((unsigned char * )"\rCommand 2 NACK\n");
     e88:	81 ea       	ldi	r24, 0xA1	; 161
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <debug_string>
						
					}
				}
			}
					
			rx_eflg = 0;
     e90:	10 92 e8 02 	sts	0x02E8, r1
     e94:	cd ce       	rjmp	.-614    	; 0xc30 <main+0x82>

00000e96 <__fixunssfsi>:
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	7b 01       	movw	r14, r22
     ea0:	8c 01       	movw	r16, r24
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	5f e4       	ldi	r21, 0x4F	; 79
     eaa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__gesf2>
     eae:	88 23       	and	r24, r24
     eb0:	8c f0       	brlt	.+34     	; 0xed4 <__fixunssfsi+0x3e>
     eb2:	c8 01       	movw	r24, r16
     eb4:	b7 01       	movw	r22, r14
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	5f e4       	ldi	r21, 0x4F	; 79
     ebe:	0e 94 c3 08 	call	0x1186	; 0x1186 <__subsf3>
     ec2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fixsfsi>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	20 50       	subi	r18, 0x00	; 0
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	40 40       	sbci	r20, 0x00	; 0
     ed0:	50 48       	sbci	r21, 0x80	; 128
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <__fixunssfsi+0x4a>
     ed4:	c8 01       	movw	r24, r16
     ed6:	b7 01       	movw	r22, r14
     ed8:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fixsfsi>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	b9 01       	movw	r22, r18
     ee2:	ca 01       	movw	r24, r20
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <_fpadd_parts>:
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ed e7       	ldi	r30, 0x7D	; 125
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__prologue_saves__>
     efa:	dc 01       	movw	r26, r24
     efc:	2b 01       	movw	r4, r22
     efe:	fa 01       	movw	r30, r20
     f00:	9c 91       	ld	r25, X
     f02:	92 30       	cpi	r25, 0x02	; 2
     f04:	08 f4       	brcc	.+2      	; 0xf08 <_fpadd_parts+0x1a>
     f06:	39 c1       	rjmp	.+626    	; 0x117a <__stack+0x7b>
     f08:	eb 01       	movw	r28, r22
     f0a:	88 81       	ld	r24, Y
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <_fpadd_parts+0x24>
     f10:	33 c1       	rjmp	.+614    	; 0x1178 <__stack+0x79>
     f12:	94 30       	cpi	r25, 0x04	; 4
     f14:	69 f4       	brne	.+26     	; 0xf30 <_fpadd_parts+0x42>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	09 f0       	breq	.+2      	; 0xf1c <_fpadd_parts+0x2e>
     f1a:	2f c1       	rjmp	.+606    	; 0x117a <__stack+0x7b>
     f1c:	11 96       	adiw	r26, 0x01	; 1
     f1e:	9c 91       	ld	r25, X
     f20:	11 97       	sbiw	r26, 0x01	; 1
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	98 17       	cp	r25, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <_fpadd_parts+0x3c>
     f28:	28 c1       	rjmp	.+592    	; 0x117a <__stack+0x7b>
     f2a:	ad ec       	ldi	r26, 0xCD	; 205
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	25 c1       	rjmp	.+586    	; 0x117a <__stack+0x7b>
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	09 f4       	brne	.+2      	; 0xf36 <_fpadd_parts+0x48>
     f34:	21 c1       	rjmp	.+578    	; 0x1178 <__stack+0x79>
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	a9 f4       	brne	.+42     	; 0xf64 <_fpadd_parts+0x76>
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	09 f0       	breq	.+2      	; 0xf40 <_fpadd_parts+0x52>
     f3e:	1d c1       	rjmp	.+570    	; 0x117a <__stack+0x7b>
     f40:	9a 01       	movw	r18, r20
     f42:	ad 01       	movw	r20, r26
     f44:	88 e0       	ldi	r24, 0x08	; 8
     f46:	ea 01       	movw	r28, r20
     f48:	09 90       	ld	r0, Y+
     f4a:	ae 01       	movw	r20, r28
     f4c:	e9 01       	movw	r28, r18
     f4e:	09 92       	st	Y+, r0
     f50:	9e 01       	movw	r18, r28
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	c1 f7       	brne	.-16     	; 0xf46 <_fpadd_parts+0x58>
     f56:	e2 01       	movw	r28, r4
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	11 96       	adiw	r26, 0x01	; 1
     f5c:	9c 91       	ld	r25, X
     f5e:	89 23       	and	r24, r25
     f60:	81 83       	std	Z+1, r24	; 0x01
     f62:	08 c1       	rjmp	.+528    	; 0x1174 <__stack+0x75>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	09 f4       	brne	.+2      	; 0xf6a <_fpadd_parts+0x7c>
     f68:	07 c1       	rjmp	.+526    	; 0x1178 <__stack+0x79>
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	2d 90       	ld	r2, X+
     f6e:	3c 90       	ld	r3, X
     f70:	13 97       	sbiw	r26, 0x03	; 3
     f72:	eb 01       	movw	r28, r22
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	9b 81       	ldd	r25, Y+3	; 0x03
     f78:	14 96       	adiw	r26, 0x04	; 4
     f7a:	ad 90       	ld	r10, X+
     f7c:	bd 90       	ld	r11, X+
     f7e:	cd 90       	ld	r12, X+
     f80:	dc 90       	ld	r13, X
     f82:	17 97       	sbiw	r26, 0x07	; 7
     f84:	ec 80       	ldd	r14, Y+4	; 0x04
     f86:	fd 80       	ldd	r15, Y+5	; 0x05
     f88:	0e 81       	ldd	r16, Y+6	; 0x06
     f8a:	1f 81       	ldd	r17, Y+7	; 0x07
     f8c:	91 01       	movw	r18, r2
     f8e:	28 1b       	sub	r18, r24
     f90:	39 0b       	sbc	r19, r25
     f92:	b9 01       	movw	r22, r18
     f94:	37 ff       	sbrs	r19, 7
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <_fpadd_parts+0xb2>
     f98:	66 27       	eor	r22, r22
     f9a:	77 27       	eor	r23, r23
     f9c:	62 1b       	sub	r22, r18
     f9e:	73 0b       	sbc	r23, r19
     fa0:	60 32       	cpi	r22, 0x20	; 32
     fa2:	71 05       	cpc	r23, r1
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <_fpadd_parts+0xba>
     fa6:	61 c0       	rjmp	.+194    	; 0x106a <_fpadd_parts+0x17c>
     fa8:	12 16       	cp	r1, r18
     faa:	13 06       	cpc	r1, r19
     fac:	6c f5       	brge	.+90     	; 0x1008 <_fpadd_parts+0x11a>
     fae:	37 01       	movw	r6, r14
     fb0:	48 01       	movw	r8, r16
     fb2:	06 2e       	mov	r0, r22
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <_fpadd_parts+0xd0>
     fb6:	96 94       	lsr	r9
     fb8:	87 94       	ror	r8
     fba:	77 94       	ror	r7
     fbc:	67 94       	ror	r6
     fbe:	0a 94       	dec	r0
     fc0:	d2 f7       	brpl	.-12     	; 0xfb6 <_fpadd_parts+0xc8>
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <_fpadd_parts+0xe6>
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	44 1f       	adc	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	6a 95       	dec	r22
     fd6:	d2 f7       	brpl	.-12     	; 0xfcc <_fpadd_parts+0xde>
     fd8:	21 50       	subi	r18, 0x01	; 1
     fda:	30 40       	sbci	r19, 0x00	; 0
     fdc:	40 40       	sbci	r20, 0x00	; 0
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	2e 21       	and	r18, r14
     fe2:	3f 21       	and	r19, r15
     fe4:	40 23       	and	r20, r16
     fe6:	51 23       	and	r21, r17
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	41 05       	cpc	r20, r1
     fee:	51 05       	cpc	r21, r1
     ff0:	21 f0       	breq	.+8      	; 0xffa <_fpadd_parts+0x10c>
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	79 01       	movw	r14, r18
     ffc:	8a 01       	movw	r16, r20
     ffe:	e6 28       	or	r14, r6
    1000:	f7 28       	or	r15, r7
    1002:	08 29       	or	r16, r8
    1004:	19 29       	or	r17, r9
    1006:	3c c0       	rjmp	.+120    	; 0x1080 <_fpadd_parts+0x192>
    1008:	23 2b       	or	r18, r19
    100a:	d1 f1       	breq	.+116    	; 0x1080 <_fpadd_parts+0x192>
    100c:	26 0e       	add	r2, r22
    100e:	37 1e       	adc	r3, r23
    1010:	35 01       	movw	r6, r10
    1012:	46 01       	movw	r8, r12
    1014:	06 2e       	mov	r0, r22
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <_fpadd_parts+0x132>
    1018:	96 94       	lsr	r9
    101a:	87 94       	ror	r8
    101c:	77 94       	ror	r7
    101e:	67 94       	ror	r6
    1020:	0a 94       	dec	r0
    1022:	d2 f7       	brpl	.-12     	; 0x1018 <_fpadd_parts+0x12a>
    1024:	21 e0       	ldi	r18, 0x01	; 1
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <_fpadd_parts+0x148>
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	44 1f       	adc	r20, r20
    1034:	55 1f       	adc	r21, r21
    1036:	6a 95       	dec	r22
    1038:	d2 f7       	brpl	.-12     	; 0x102e <_fpadd_parts+0x140>
    103a:	21 50       	subi	r18, 0x01	; 1
    103c:	30 40       	sbci	r19, 0x00	; 0
    103e:	40 40       	sbci	r20, 0x00	; 0
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	2a 21       	and	r18, r10
    1044:	3b 21       	and	r19, r11
    1046:	4c 21       	and	r20, r12
    1048:	5d 21       	and	r21, r13
    104a:	21 15       	cp	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	41 05       	cpc	r20, r1
    1050:	51 05       	cpc	r21, r1
    1052:	21 f0       	breq	.+8      	; 0x105c <_fpadd_parts+0x16e>
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	59 01       	movw	r10, r18
    105e:	6a 01       	movw	r12, r20
    1060:	a6 28       	or	r10, r6
    1062:	b7 28       	or	r11, r7
    1064:	c8 28       	or	r12, r8
    1066:	d9 28       	or	r13, r9
    1068:	0b c0       	rjmp	.+22     	; 0x1080 <_fpadd_parts+0x192>
    106a:	82 15       	cp	r24, r2
    106c:	93 05       	cpc	r25, r3
    106e:	2c f0       	brlt	.+10     	; 0x107a <_fpadd_parts+0x18c>
    1070:	1c 01       	movw	r2, r24
    1072:	aa 24       	eor	r10, r10
    1074:	bb 24       	eor	r11, r11
    1076:	65 01       	movw	r12, r10
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <_fpadd_parts+0x192>
    107a:	ee 24       	eor	r14, r14
    107c:	ff 24       	eor	r15, r15
    107e:	87 01       	movw	r16, r14
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	9c 91       	ld	r25, X
    1084:	d2 01       	movw	r26, r4
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	8c 91       	ld	r24, X
    108a:	98 17       	cp	r25, r24
    108c:	09 f4       	brne	.+2      	; 0x1090 <_fpadd_parts+0x1a2>
    108e:	45 c0       	rjmp	.+138    	; 0x111a <__stack+0x1b>
    1090:	99 23       	and	r25, r25
    1092:	39 f0       	breq	.+14     	; 0x10a2 <_fpadd_parts+0x1b4>
    1094:	a8 01       	movw	r20, r16
    1096:	97 01       	movw	r18, r14
    1098:	2a 19       	sub	r18, r10
    109a:	3b 09       	sbc	r19, r11
    109c:	4c 09       	sbc	r20, r12
    109e:	5d 09       	sbc	r21, r13
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <_fpadd_parts+0x1c0>
    10a2:	a6 01       	movw	r20, r12
    10a4:	95 01       	movw	r18, r10
    10a6:	2e 19       	sub	r18, r14
    10a8:	3f 09       	sbc	r19, r15
    10aa:	40 0b       	sbc	r20, r16
    10ac:	51 0b       	sbc	r21, r17
    10ae:	57 fd       	sbrc	r21, 7
    10b0:	08 c0       	rjmp	.+16     	; 0x10c2 <_fpadd_parts+0x1d4>
    10b2:	11 82       	std	Z+1, r1	; 0x01
    10b4:	33 82       	std	Z+3, r3	; 0x03
    10b6:	22 82       	std	Z+2, r2	; 0x02
    10b8:	24 83       	std	Z+4, r18	; 0x04
    10ba:	35 83       	std	Z+5, r19	; 0x05
    10bc:	46 83       	std	Z+6, r20	; 0x06
    10be:	57 83       	std	Z+7, r21	; 0x07
    10c0:	1d c0       	rjmp	.+58     	; 0x10fc <_fpadd_parts+0x20e>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	81 83       	std	Z+1, r24	; 0x01
    10c6:	33 82       	std	Z+3, r3	; 0x03
    10c8:	22 82       	std	Z+2, r2	; 0x02
    10ca:	88 27       	eor	r24, r24
    10cc:	99 27       	eor	r25, r25
    10ce:	dc 01       	movw	r26, r24
    10d0:	82 1b       	sub	r24, r18
    10d2:	93 0b       	sbc	r25, r19
    10d4:	a4 0b       	sbc	r26, r20
    10d6:	b5 0b       	sbc	r27, r21
    10d8:	84 83       	std	Z+4, r24	; 0x04
    10da:	95 83       	std	Z+5, r25	; 0x05
    10dc:	a6 83       	std	Z+6, r26	; 0x06
    10de:	b7 83       	std	Z+7, r27	; 0x07
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <_fpadd_parts+0x20e>
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	44 1f       	adc	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	24 83       	std	Z+4, r18	; 0x04
    10ec:	35 83       	std	Z+5, r19	; 0x05
    10ee:	46 83       	std	Z+6, r20	; 0x06
    10f0:	57 83       	std	Z+7, r21	; 0x07
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	93 83       	std	Z+3, r25	; 0x03
    10fa:	82 83       	std	Z+2, r24	; 0x02
    10fc:	24 81       	ldd	r18, Z+4	; 0x04
    10fe:	35 81       	ldd	r19, Z+5	; 0x05
    1100:	46 81       	ldd	r20, Z+6	; 0x06
    1102:	57 81       	ldd	r21, Z+7	; 0x07
    1104:	da 01       	movw	r26, r20
    1106:	c9 01       	movw	r24, r18
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	a1 09       	sbc	r26, r1
    110c:	b1 09       	sbc	r27, r1
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	af 4f       	sbci	r26, 0xFF	; 255
    1114:	bf 43       	sbci	r27, 0x3F	; 63
    1116:	28 f3       	brcs	.-54     	; 0x10e2 <_fpadd_parts+0x1f4>
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <__stack+0x31>
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	33 82       	std	Z+3, r3	; 0x03
    111e:	22 82       	std	Z+2, r2	; 0x02
    1120:	ea 0c       	add	r14, r10
    1122:	fb 1c       	adc	r15, r11
    1124:	0c 1d       	adc	r16, r12
    1126:	1d 1d       	adc	r17, r13
    1128:	e4 82       	std	Z+4, r14	; 0x04
    112a:	f5 82       	std	Z+5, r15	; 0x05
    112c:	06 83       	std	Z+6, r16	; 0x06
    112e:	17 83       	std	Z+7, r17	; 0x07
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	80 83       	st	Z, r24
    1134:	24 81       	ldd	r18, Z+4	; 0x04
    1136:	35 81       	ldd	r19, Z+5	; 0x05
    1138:	46 81       	ldd	r20, Z+6	; 0x06
    113a:	57 81       	ldd	r21, Z+7	; 0x07
    113c:	57 ff       	sbrs	r21, 7
    113e:	1a c0       	rjmp	.+52     	; 0x1174 <__stack+0x75>
    1140:	c9 01       	movw	r24, r18
    1142:	aa 27       	eor	r26, r26
    1144:	97 fd       	sbrc	r25, 7
    1146:	a0 95       	com	r26
    1148:	ba 2f       	mov	r27, r26
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	a0 70       	andi	r26, 0x00	; 0
    1150:	b0 70       	andi	r27, 0x00	; 0
    1152:	56 95       	lsr	r21
    1154:	47 95       	ror	r20
    1156:	37 95       	ror	r19
    1158:	27 95       	ror	r18
    115a:	82 2b       	or	r24, r18
    115c:	93 2b       	or	r25, r19
    115e:	a4 2b       	or	r26, r20
    1160:	b5 2b       	or	r27, r21
    1162:	84 83       	std	Z+4, r24	; 0x04
    1164:	95 83       	std	Z+5, r25	; 0x05
    1166:	a6 83       	std	Z+6, r26	; 0x06
    1168:	b7 83       	std	Z+7, r27	; 0x07
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	93 83       	std	Z+3, r25	; 0x03
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	df 01       	movw	r26, r30
    1176:	01 c0       	rjmp	.+2      	; 0x117a <__stack+0x7b>
    1178:	d2 01       	movw	r26, r4
    117a:	cd 01       	movw	r24, r26
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	e2 e1       	ldi	r30, 0x12	; 18
    1182:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__epilogue_restores__>

00001186 <__subsf3>:
    1186:	a0 e2       	ldi	r26, 0x20	; 32
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 ec       	ldi	r30, 0xC9	; 201
    118c:	f8 e0       	ldi	r31, 0x08	; 8
    118e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x18>
    1192:	69 83       	std	Y+1, r22	; 0x01
    1194:	7a 83       	std	Y+2, r23	; 0x02
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	2d 83       	std	Y+5, r18	; 0x05
    119c:	3e 83       	std	Y+6, r19	; 0x06
    119e:	4f 83       	std	Y+7, r20	; 0x07
    11a0:	58 87       	std	Y+8, r21	; 0x08
    11a2:	e9 e0       	ldi	r30, 0x09	; 9
    11a4:	ee 2e       	mov	r14, r30
    11a6:	f1 2c       	mov	r15, r1
    11a8:	ec 0e       	add	r14, r28
    11aa:	fd 1e       	adc	r15, r29
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	b7 01       	movw	r22, r14
    11b2:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    11b6:	8e 01       	movw	r16, r28
    11b8:	0f 5e       	subi	r16, 0xEF	; 239
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	ce 01       	movw	r24, r28
    11be:	05 96       	adiw	r24, 0x05	; 5
    11c0:	b8 01       	movw	r22, r16
    11c2:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    11c6:	8a 89       	ldd	r24, Y+18	; 0x12
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	89 27       	eor	r24, r25
    11cc:	8a 8b       	std	Y+18, r24	; 0x12
    11ce:	c7 01       	movw	r24, r14
    11d0:	b8 01       	movw	r22, r16
    11d2:	ae 01       	movw	r20, r28
    11d4:	47 5e       	subi	r20, 0xE7	; 231
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	0e 94 77 07 	call	0xeee	; 0xeee <_fpadd_parts>
    11dc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__pack_f>
    11e0:	a0 96       	adiw	r28, 0x20	; 32
    11e2:	e6 e0       	ldi	r30, 0x06	; 6
    11e4:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x18>

000011e8 <__addsf3>:
    11e8:	a0 e2       	ldi	r26, 0x20	; 32
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ea ef       	ldi	r30, 0xFA	; 250
    11ee:	f8 e0       	ldi	r31, 0x08	; 8
    11f0:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x18>
    11f4:	69 83       	std	Y+1, r22	; 0x01
    11f6:	7a 83       	std	Y+2, r23	; 0x02
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	2d 83       	std	Y+5, r18	; 0x05
    11fe:	3e 83       	std	Y+6, r19	; 0x06
    1200:	4f 83       	std	Y+7, r20	; 0x07
    1202:	58 87       	std	Y+8, r21	; 0x08
    1204:	f9 e0       	ldi	r31, 0x09	; 9
    1206:	ef 2e       	mov	r14, r31
    1208:	f1 2c       	mov	r15, r1
    120a:	ec 0e       	add	r14, r28
    120c:	fd 1e       	adc	r15, r29
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	b7 01       	movw	r22, r14
    1214:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1218:	8e 01       	movw	r16, r28
    121a:	0f 5e       	subi	r16, 0xEF	; 239
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	ce 01       	movw	r24, r28
    1220:	05 96       	adiw	r24, 0x05	; 5
    1222:	b8 01       	movw	r22, r16
    1224:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1228:	c7 01       	movw	r24, r14
    122a:	b8 01       	movw	r22, r16
    122c:	ae 01       	movw	r20, r28
    122e:	47 5e       	subi	r20, 0xE7	; 231
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	0e 94 77 07 	call	0xeee	; 0xeee <_fpadd_parts>
    1236:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__pack_f>
    123a:	a0 96       	adiw	r28, 0x20	; 32
    123c:	e6 e0       	ldi	r30, 0x06	; 6
    123e:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x18>

00001242 <__mulsf3>:
    1242:	a0 e2       	ldi	r26, 0x20	; 32
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e7 e2       	ldi	r30, 0x27	; 39
    1248:	f9 e0       	ldi	r31, 0x09	; 9
    124a:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__prologue_saves__>
    124e:	69 83       	std	Y+1, r22	; 0x01
    1250:	7a 83       	std	Y+2, r23	; 0x02
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	2d 83       	std	Y+5, r18	; 0x05
    1258:	3e 83       	std	Y+6, r19	; 0x06
    125a:	4f 83       	std	Y+7, r20	; 0x07
    125c:	58 87       	std	Y+8, r21	; 0x08
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	be 01       	movw	r22, r28
    1264:	67 5f       	subi	r22, 0xF7	; 247
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    126c:	ce 01       	movw	r24, r28
    126e:	05 96       	adiw	r24, 0x05	; 5
    1270:	be 01       	movw	r22, r28
    1272:	6f 5e       	subi	r22, 0xEF	; 239
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	92 30       	cpi	r25, 0x02	; 2
    127e:	88 f0       	brcs	.+34     	; 0x12a2 <__mulsf3+0x60>
    1280:	89 89       	ldd	r24, Y+17	; 0x11
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	c8 f0       	brcs	.+50     	; 0x12b8 <__mulsf3+0x76>
    1286:	94 30       	cpi	r25, 0x04	; 4
    1288:	19 f4       	brne	.+6      	; 0x1290 <__mulsf3+0x4e>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	51 f4       	brne	.+20     	; 0x12a2 <__mulsf3+0x60>
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <__mulsf3+0x56>
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	29 f4       	brne	.+10     	; 0x129e <__mulsf3+0x5c>
    1294:	92 30       	cpi	r25, 0x02	; 2
    1296:	81 f4       	brne	.+32     	; 0x12b8 <__mulsf3+0x76>
    1298:	8d ec       	ldi	r24, 0xCD	; 205
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	c6 c0       	rjmp	.+396    	; 0x142a <__mulsf3+0x1e8>
    129e:	92 30       	cpi	r25, 0x02	; 2
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <__mulsf3+0x72>
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	8a 89       	ldd	r24, Y+18	; 0x12
    12a8:	98 13       	cpse	r25, r24
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	2a 87       	std	Y+10, r18	; 0x0a
    12ae:	ce 01       	movw	r24, r28
    12b0:	09 96       	adiw	r24, 0x09	; 9
    12b2:	bb c0       	rjmp	.+374    	; 0x142a <__mulsf3+0x1e8>
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	49 f4       	brne	.+18     	; 0x12ca <__mulsf3+0x88>
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	8a 89       	ldd	r24, Y+18	; 0x12
    12be:	98 13       	cpse	r25, r24
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	2a 8b       	std	Y+18, r18	; 0x12
    12c4:	ce 01       	movw	r24, r28
    12c6:	41 96       	adiw	r24, 0x11	; 17
    12c8:	b0 c0       	rjmp	.+352    	; 0x142a <__mulsf3+0x1e8>
    12ca:	2d 84       	ldd	r2, Y+13	; 0x0d
    12cc:	3e 84       	ldd	r3, Y+14	; 0x0e
    12ce:	4f 84       	ldd	r4, Y+15	; 0x0f
    12d0:	58 88       	ldd	r5, Y+16	; 0x10
    12d2:	6d 88       	ldd	r6, Y+21	; 0x15
    12d4:	7e 88       	ldd	r7, Y+22	; 0x16
    12d6:	8f 88       	ldd	r8, Y+23	; 0x17
    12d8:	98 8c       	ldd	r9, Y+24	; 0x18
    12da:	ee 24       	eor	r14, r14
    12dc:	ff 24       	eor	r15, r15
    12de:	87 01       	movw	r16, r14
    12e0:	aa 24       	eor	r10, r10
    12e2:	bb 24       	eor	r11, r11
    12e4:	65 01       	movw	r12, r10
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	e0 e0       	ldi	r30, 0x00	; 0
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	c1 01       	movw	r24, r2
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	89 2b       	or	r24, r25
    12fa:	e9 f0       	breq	.+58     	; 0x1336 <__mulsf3+0xf4>
    12fc:	e6 0c       	add	r14, r6
    12fe:	f7 1c       	adc	r15, r7
    1300:	08 1d       	adc	r16, r8
    1302:	19 1d       	adc	r17, r9
    1304:	9a 01       	movw	r18, r20
    1306:	ab 01       	movw	r20, r22
    1308:	2a 0d       	add	r18, r10
    130a:	3b 1d       	adc	r19, r11
    130c:	4c 1d       	adc	r20, r12
    130e:	5d 1d       	adc	r21, r13
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e6 14       	cp	r14, r6
    131a:	f7 04       	cpc	r15, r7
    131c:	08 05       	cpc	r16, r8
    131e:	19 05       	cpc	r17, r9
    1320:	20 f4       	brcc	.+8      	; 0x132a <__mulsf3+0xe8>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e0       	ldi	r26, 0x00	; 0
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	ba 01       	movw	r22, r20
    132c:	a9 01       	movw	r20, r18
    132e:	48 0f       	add	r20, r24
    1330:	59 1f       	adc	r21, r25
    1332:	6a 1f       	adc	r22, r26
    1334:	7b 1f       	adc	r23, r27
    1336:	aa 0c       	add	r10, r10
    1338:	bb 1c       	adc	r11, r11
    133a:	cc 1c       	adc	r12, r12
    133c:	dd 1c       	adc	r13, r13
    133e:	97 fe       	sbrs	r9, 7
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <__mulsf3+0x110>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	a8 2a       	or	r10, r24
    134c:	b9 2a       	or	r11, r25
    134e:	ca 2a       	or	r12, r26
    1350:	db 2a       	or	r13, r27
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	e0 32       	cpi	r30, 0x20	; 32
    1356:	f1 05       	cpc	r31, r1
    1358:	49 f0       	breq	.+18     	; 0x136c <__mulsf3+0x12a>
    135a:	66 0c       	add	r6, r6
    135c:	77 1c       	adc	r7, r7
    135e:	88 1c       	adc	r8, r8
    1360:	99 1c       	adc	r9, r9
    1362:	56 94       	lsr	r5
    1364:	47 94       	ror	r4
    1366:	37 94       	ror	r3
    1368:	27 94       	ror	r2
    136a:	c3 cf       	rjmp	.-122    	; 0x12f2 <__mulsf3+0xb0>
    136c:	fa 85       	ldd	r31, Y+10	; 0x0a
    136e:	ea 89       	ldd	r30, Y+18	; 0x12
    1370:	2b 89       	ldd	r18, Y+19	; 0x13
    1372:	3c 89       	ldd	r19, Y+20	; 0x14
    1374:	8b 85       	ldd	r24, Y+11	; 0x0b
    1376:	9c 85       	ldd	r25, Y+12	; 0x0c
    1378:	28 0f       	add	r18, r24
    137a:	39 1f       	adc	r19, r25
    137c:	2e 5f       	subi	r18, 0xFE	; 254
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	17 c0       	rjmp	.+46     	; 0x13b0 <__mulsf3+0x16e>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	90 70       	andi	r25, 0x00	; 0
    1388:	89 2b       	or	r24, r25
    138a:	61 f0       	breq	.+24     	; 0x13a4 <__mulsf3+0x162>
    138c:	16 95       	lsr	r17
    138e:	07 95       	ror	r16
    1390:	f7 94       	ror	r15
    1392:	e7 94       	ror	r14
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e8       	ldi	r27, 0x80	; 128
    139c:	e8 2a       	or	r14, r24
    139e:	f9 2a       	or	r15, r25
    13a0:	0a 2b       	or	r16, r26
    13a2:	1b 2b       	or	r17, r27
    13a4:	76 95       	lsr	r23
    13a6:	67 95       	ror	r22
    13a8:	57 95       	ror	r21
    13aa:	47 95       	ror	r20
    13ac:	2f 5f       	subi	r18, 0xFF	; 255
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	77 fd       	sbrc	r23, 7
    13b2:	e7 cf       	rjmp	.-50     	; 0x1382 <__mulsf3+0x140>
    13b4:	0c c0       	rjmp	.+24     	; 0x13ce <__mulsf3+0x18c>
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	66 1f       	adc	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	17 fd       	sbrc	r17, 7
    13c0:	41 60       	ori	r20, 0x01	; 1
    13c2:	ee 0c       	add	r14, r14
    13c4:	ff 1c       	adc	r15, r15
    13c6:	00 1f       	adc	r16, r16
    13c8:	11 1f       	adc	r17, r17
    13ca:	21 50       	subi	r18, 0x01	; 1
    13cc:	30 40       	sbci	r19, 0x00	; 0
    13ce:	40 30       	cpi	r20, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	59 07       	cpc	r21, r25
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	69 07       	cpc	r22, r25
    13d8:	90 e4       	ldi	r25, 0x40	; 64
    13da:	79 07       	cpc	r23, r25
    13dc:	60 f3       	brcs	.-40     	; 0x13b6 <__mulsf3+0x174>
    13de:	2b 8f       	std	Y+27, r18	; 0x1b
    13e0:	3c 8f       	std	Y+28, r19	; 0x1c
    13e2:	db 01       	movw	r26, r22
    13e4:	ca 01       	movw	r24, r20
    13e6:	8f 77       	andi	r24, 0x7F	; 127
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	a0 70       	andi	r26, 0x00	; 0
    13ec:	b0 70       	andi	r27, 0x00	; 0
    13ee:	80 34       	cpi	r24, 0x40	; 64
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	61 f4       	brne	.+24     	; 0x1410 <__mulsf3+0x1ce>
    13f8:	47 fd       	sbrc	r20, 7
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <__mulsf3+0x1ce>
    13fc:	e1 14       	cp	r14, r1
    13fe:	f1 04       	cpc	r15, r1
    1400:	01 05       	cpc	r16, r1
    1402:	11 05       	cpc	r17, r1
    1404:	29 f0       	breq	.+10     	; 0x1410 <__mulsf3+0x1ce>
    1406:	40 5c       	subi	r20, 0xC0	; 192
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	6f 4f       	sbci	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	40 78       	andi	r20, 0x80	; 128
    1410:	1a 8e       	std	Y+26, r1	; 0x1a
    1412:	fe 17       	cp	r31, r30
    1414:	11 f0       	breq	.+4      	; 0x141a <__mulsf3+0x1d8>
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	8a 8f       	std	Y+26, r24	; 0x1a
    141a:	4d 8f       	std	Y+29, r20	; 0x1d
    141c:	5e 8f       	std	Y+30, r21	; 0x1e
    141e:	6f 8f       	std	Y+31, r22	; 0x1f
    1420:	78 a3       	std	Y+32, r23	; 0x20
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	89 8f       	std	Y+25, r24	; 0x19
    1426:	ce 01       	movw	r24, r28
    1428:	49 96       	adiw	r24, 0x19	; 25
    142a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__pack_f>
    142e:	a0 96       	adiw	r28, 0x20	; 32
    1430:	e2 e1       	ldi	r30, 0x12	; 18
    1432:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__epilogue_restores__>

00001436 <__gtsf2>:
    1436:	a8 e1       	ldi	r26, 0x18	; 24
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e1 e2       	ldi	r30, 0x21	; 33
    143c:	fa e0       	ldi	r31, 0x0A	; 10
    143e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x18>
    1442:	69 83       	std	Y+1, r22	; 0x01
    1444:	7a 83       	std	Y+2, r23	; 0x02
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	2d 83       	std	Y+5, r18	; 0x05
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	4f 83       	std	Y+7, r20	; 0x07
    1450:	58 87       	std	Y+8, r21	; 0x08
    1452:	89 e0       	ldi	r24, 0x09	; 9
    1454:	e8 2e       	mov	r14, r24
    1456:	f1 2c       	mov	r15, r1
    1458:	ec 0e       	add	r14, r28
    145a:	fd 1e       	adc	r15, r29
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	b7 01       	movw	r22, r14
    1462:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1466:	8e 01       	movw	r16, r28
    1468:	0f 5e       	subi	r16, 0xEF	; 239
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	ce 01       	movw	r24, r28
    146e:	05 96       	adiw	r24, 0x05	; 5
    1470:	b8 01       	movw	r22, r16
    1472:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	40 f0       	brcs	.+16     	; 0x148c <__gtsf2+0x56>
    147c:	89 89       	ldd	r24, Y+17	; 0x11
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	28 f0       	brcs	.+10     	; 0x148c <__gtsf2+0x56>
    1482:	c7 01       	movw	r24, r14
    1484:	b8 01       	movw	r22, r16
    1486:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    148a:	01 c0       	rjmp	.+2      	; 0x148e <__gtsf2+0x58>
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	68 96       	adiw	r28, 0x18	; 24
    1490:	e6 e0       	ldi	r30, 0x06	; 6
    1492:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x18>

00001496 <__gesf2>:
    1496:	a8 e1       	ldi	r26, 0x18	; 24
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e1 e5       	ldi	r30, 0x51	; 81
    149c:	fa e0       	ldi	r31, 0x0A	; 10
    149e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x18>
    14a2:	69 83       	std	Y+1, r22	; 0x01
    14a4:	7a 83       	std	Y+2, r23	; 0x02
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	2d 83       	std	Y+5, r18	; 0x05
    14ac:	3e 83       	std	Y+6, r19	; 0x06
    14ae:	4f 83       	std	Y+7, r20	; 0x07
    14b0:	58 87       	std	Y+8, r21	; 0x08
    14b2:	89 e0       	ldi	r24, 0x09	; 9
    14b4:	e8 2e       	mov	r14, r24
    14b6:	f1 2c       	mov	r15, r1
    14b8:	ec 0e       	add	r14, r28
    14ba:	fd 1e       	adc	r15, r29
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	b7 01       	movw	r22, r14
    14c2:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    14c6:	8e 01       	movw	r16, r28
    14c8:	0f 5e       	subi	r16, 0xEF	; 239
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	ce 01       	movw	r24, r28
    14ce:	05 96       	adiw	r24, 0x05	; 5
    14d0:	b8 01       	movw	r22, r16
    14d2:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	40 f0       	brcs	.+16     	; 0x14ec <__gesf2+0x56>
    14dc:	89 89       	ldd	r24, Y+17	; 0x11
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	28 f0       	brcs	.+10     	; 0x14ec <__gesf2+0x56>
    14e2:	c7 01       	movw	r24, r14
    14e4:	b8 01       	movw	r22, r16
    14e6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <__gesf2+0x58>
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	68 96       	adiw	r28, 0x18	; 24
    14f0:	e6 e0       	ldi	r30, 0x06	; 6
    14f2:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x18>

000014f6 <__ltsf2>:
    14f6:	a8 e1       	ldi	r26, 0x18	; 24
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__prologue_saves__+0x18>
    1502:	69 83       	std	Y+1, r22	; 0x01
    1504:	7a 83       	std	Y+2, r23	; 0x02
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	2d 83       	std	Y+5, r18	; 0x05
    150c:	3e 83       	std	Y+6, r19	; 0x06
    150e:	4f 83       	std	Y+7, r20	; 0x07
    1510:	58 87       	std	Y+8, r21	; 0x08
    1512:	89 e0       	ldi	r24, 0x09	; 9
    1514:	e8 2e       	mov	r14, r24
    1516:	f1 2c       	mov	r15, r1
    1518:	ec 0e       	add	r14, r28
    151a:	fd 1e       	adc	r15, r29
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	b7 01       	movw	r22, r14
    1522:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1526:	8e 01       	movw	r16, r28
    1528:	0f 5e       	subi	r16, 0xEF	; 239
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	ce 01       	movw	r24, r28
    152e:	05 96       	adiw	r24, 0x05	; 5
    1530:	b8 01       	movw	r22, r16
    1532:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	40 f0       	brcs	.+16     	; 0x154c <__ltsf2+0x56>
    153c:	89 89       	ldd	r24, Y+17	; 0x11
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	28 f0       	brcs	.+10     	; 0x154c <__ltsf2+0x56>
    1542:	c7 01       	movw	r24, r14
    1544:	b8 01       	movw	r22, r16
    1546:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fpcmp_parts_f>
    154a:	01 c0       	rjmp	.+2      	; 0x154e <__ltsf2+0x58>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	68 96       	adiw	r28, 0x18	; 24
    1550:	e6 e0       	ldi	r30, 0x06	; 6
    1552:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__epilogue_restores__+0x18>

00001556 <__floatsisf>:
    1556:	a8 e0       	ldi	r26, 0x08	; 8
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e1 eb       	ldi	r30, 0xB1	; 177
    155c:	fa e0       	ldi	r31, 0x0A	; 10
    155e:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__prologue_saves__+0x12>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	da 01       	movw	r26, r20
    156c:	c9 01       	movw	r24, r18
    156e:	88 27       	eor	r24, r24
    1570:	b7 fd       	sbrc	r27, 7
    1572:	83 95       	inc	r24
    1574:	99 27       	eor	r25, r25
    1576:	aa 27       	eor	r26, r26
    1578:	bb 27       	eor	r27, r27
    157a:	b8 2e       	mov	r11, r24
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	41 05       	cpc	r20, r1
    1582:	51 05       	cpc	r21, r1
    1584:	19 f4       	brne	.+6      	; 0x158c <__floatsisf+0x36>
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	3a c0       	rjmp	.+116    	; 0x1600 <__floatsisf+0xaa>
    158c:	88 23       	and	r24, r24
    158e:	a9 f0       	breq	.+42     	; 0x15ba <__floatsisf+0x64>
    1590:	20 30       	cpi	r18, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	38 07       	cpc	r19, r24
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	48 07       	cpc	r20, r24
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	58 07       	cpc	r21, r24
    159e:	29 f4       	brne	.+10     	; 0x15aa <__floatsisf+0x54>
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	9f ec       	ldi	r25, 0xCF	; 207
    15a8:	30 c0       	rjmp	.+96     	; 0x160a <__floatsisf+0xb4>
    15aa:	ee 24       	eor	r14, r14
    15ac:	ff 24       	eor	r15, r15
    15ae:	87 01       	movw	r16, r14
    15b0:	e2 1a       	sub	r14, r18
    15b2:	f3 0a       	sbc	r15, r19
    15b4:	04 0b       	sbc	r16, r20
    15b6:	15 0b       	sbc	r17, r21
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <__floatsisf+0x68>
    15ba:	79 01       	movw	r14, r18
    15bc:	8a 01       	movw	r16, r20
    15be:	8e e1       	ldi	r24, 0x1E	; 30
    15c0:	c8 2e       	mov	r12, r24
    15c2:	d1 2c       	mov	r13, r1
    15c4:	dc 82       	std	Y+4, r13	; 0x04
    15c6:	cb 82       	std	Y+3, r12	; 0x03
    15c8:	ed 82       	std	Y+5, r14	; 0x05
    15ca:	fe 82       	std	Y+6, r15	; 0x06
    15cc:	0f 83       	std	Y+7, r16	; 0x07
    15ce:	18 87       	std	Y+8, r17	; 0x08
    15d0:	c8 01       	movw	r24, r16
    15d2:	b7 01       	movw	r22, r14
    15d4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__clzsi2>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	18 16       	cp	r1, r24
    15dc:	19 06       	cpc	r1, r25
    15de:	84 f4       	brge	.+32     	; 0x1600 <__floatsisf+0xaa>
    15e0:	08 2e       	mov	r0, r24
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <__floatsisf+0x96>
    15e4:	ee 0c       	add	r14, r14
    15e6:	ff 1c       	adc	r15, r15
    15e8:	00 1f       	adc	r16, r16
    15ea:	11 1f       	adc	r17, r17
    15ec:	0a 94       	dec	r0
    15ee:	d2 f7       	brpl	.-12     	; 0x15e4 <__floatsisf+0x8e>
    15f0:	ed 82       	std	Y+5, r14	; 0x05
    15f2:	fe 82       	std	Y+6, r15	; 0x06
    15f4:	0f 83       	std	Y+7, r16	; 0x07
    15f6:	18 87       	std	Y+8, r17	; 0x08
    15f8:	c8 1a       	sub	r12, r24
    15fa:	d9 0a       	sbc	r13, r25
    15fc:	dc 82       	std	Y+4, r13	; 0x04
    15fe:	cb 82       	std	Y+3, r12	; 0x03
    1600:	ba 82       	std	Y+2, r11	; 0x02
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__pack_f>
    160a:	28 96       	adiw	r28, 0x08	; 8
    160c:	e9 e0       	ldi	r30, 0x09	; 9
    160e:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__epilogue_restores__+0x12>

00001612 <__fixsfsi>:
    1612:	ac e0       	ldi	r26, 0x0C	; 12
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e0       	ldi	r30, 0x0F	; 15
    1618:	fb e0       	ldi	r31, 0x0B	; 11
    161a:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__prologue_saves__+0x20>
    161e:	69 83       	std	Y+1, r22	; 0x01
    1620:	7a 83       	std	Y+2, r23	; 0x02
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	ce 01       	movw	r24, r28
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	be 01       	movw	r22, r28
    162c:	6b 5f       	subi	r22, 0xFB	; 251
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	0e 94 81 0c 	call	0x1902	; 0x1902 <__unpack_f>
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	61 f1       	breq	.+88     	; 0x1692 <__fixsfsi+0x80>
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	50 f1       	brcs	.+84     	; 0x1692 <__fixsfsi+0x80>
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	21 f4       	brne	.+8      	; 0x164a <__fixsfsi+0x38>
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	88 23       	and	r24, r24
    1646:	51 f1       	breq	.+84     	; 0x169c <__fixsfsi+0x8a>
    1648:	2e c0       	rjmp	.+92     	; 0x16a6 <__fixsfsi+0x94>
    164a:	2f 81       	ldd	r18, Y+7	; 0x07
    164c:	38 85       	ldd	r19, Y+8	; 0x08
    164e:	37 fd       	sbrc	r19, 7
    1650:	20 c0       	rjmp	.+64     	; 0x1692 <__fixsfsi+0x80>
    1652:	6e 81       	ldd	r22, Y+6	; 0x06
    1654:	2f 31       	cpi	r18, 0x1F	; 31
    1656:	31 05       	cpc	r19, r1
    1658:	1c f0       	brlt	.+6      	; 0x1660 <__fixsfsi+0x4e>
    165a:	66 23       	and	r22, r22
    165c:	f9 f0       	breq	.+62     	; 0x169c <__fixsfsi+0x8a>
    165e:	23 c0       	rjmp	.+70     	; 0x16a6 <__fixsfsi+0x94>
    1660:	8e e1       	ldi	r24, 0x1E	; 30
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	82 1b       	sub	r24, r18
    1666:	93 0b       	sbc	r25, r19
    1668:	29 85       	ldd	r18, Y+9	; 0x09
    166a:	3a 85       	ldd	r19, Y+10	; 0x0a
    166c:	4b 85       	ldd	r20, Y+11	; 0x0b
    166e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__fixsfsi+0x68>
    1672:	56 95       	lsr	r21
    1674:	47 95       	ror	r20
    1676:	37 95       	ror	r19
    1678:	27 95       	ror	r18
    167a:	8a 95       	dec	r24
    167c:	d2 f7       	brpl	.-12     	; 0x1672 <__fixsfsi+0x60>
    167e:	66 23       	and	r22, r22
    1680:	b1 f0       	breq	.+44     	; 0x16ae <__fixsfsi+0x9c>
    1682:	50 95       	com	r21
    1684:	40 95       	com	r20
    1686:	30 95       	com	r19
    1688:	21 95       	neg	r18
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	4f 4f       	sbci	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <__fixsfsi+0x9c>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <__fixsfsi+0x9c>
    169c:	2f ef       	ldi	r18, 0xFF	; 255
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f ef       	ldi	r20, 0xFF	; 255
    16a2:	5f e7       	ldi	r21, 0x7F	; 127
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fixsfsi+0x9c>
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	50 e8       	ldi	r21, 0x80	; 128
    16ae:	b9 01       	movw	r22, r18
    16b0:	ca 01       	movw	r24, r20
    16b2:	2c 96       	adiw	r28, 0x0c	; 12
    16b4:	e2 e0       	ldi	r30, 0x02	; 2
    16b6:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__epilogue_restores__+0x20>

000016ba <__clzsi2>:
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	7b 01       	movw	r14, r22
    16c4:	8c 01       	movw	r16, r24
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	e8 16       	cp	r14, r24
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	f8 06       	cpc	r15, r24
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	08 07       	cpc	r16, r24
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	18 07       	cpc	r17, r24
    16d6:	88 f4       	brcc	.+34     	; 0x16fa <__clzsi2+0x40>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	e8 16       	cp	r14, r24
    16dc:	f1 04       	cpc	r15, r1
    16de:	01 05       	cpc	r16, r1
    16e0:	11 05       	cpc	r17, r1
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <__clzsi2+0x36>
    16e4:	28 f0       	brcs	.+10     	; 0x16f0 <__clzsi2+0x36>
    16e6:	88 e0       	ldi	r24, 0x08	; 8
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e0       	ldi	r26, 0x00	; 0
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	17 c0       	rjmp	.+46     	; 0x171e <__clzsi2+0x64>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e0       	ldi	r26, 0x00	; 0
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	12 c0       	rjmp	.+36     	; 0x171e <__clzsi2+0x64>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	e8 16       	cp	r14, r24
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	f8 06       	cpc	r15, r24
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	08 07       	cpc	r16, r24
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	18 07       	cpc	r17, r24
    170a:	28 f0       	brcs	.+10     	; 0x1716 <__clzsi2+0x5c>
    170c:	88 e1       	ldi	r24, 0x18	; 24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__clzsi2+0x64>
    1716:	80 e1       	ldi	r24, 0x10	; 16
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	20 e2       	ldi	r18, 0x20	; 32
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	28 1b       	sub	r18, r24
    1728:	39 0b       	sbc	r19, r25
    172a:	4a 0b       	sbc	r20, r26
    172c:	5b 0b       	sbc	r21, r27
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <__clzsi2+0x7e>
    1730:	16 95       	lsr	r17
    1732:	07 95       	ror	r16
    1734:	f7 94       	ror	r15
    1736:	e7 94       	ror	r14
    1738:	8a 95       	dec	r24
    173a:	d2 f7       	brpl	.-12     	; 0x1730 <__clzsi2+0x76>
    173c:	f7 01       	movw	r30, r14
    173e:	eb 52       	subi	r30, 0x2B	; 43
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	80 81       	ld	r24, Z
    1744:	28 1b       	sub	r18, r24
    1746:	31 09       	sbc	r19, r1
    1748:	41 09       	sbc	r20, r1
    174a:	51 09       	sbc	r21, r1
    174c:	c9 01       	movw	r24, r18
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	08 95       	ret

00001758 <__pack_f>:
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	fc 01       	movw	r30, r24
    1764:	e4 80       	ldd	r14, Z+4	; 0x04
    1766:	f5 80       	ldd	r15, Z+5	; 0x05
    1768:	06 81       	ldd	r16, Z+6	; 0x06
    176a:	17 81       	ldd	r17, Z+7	; 0x07
    176c:	d1 80       	ldd	r13, Z+1	; 0x01
    176e:	80 81       	ld	r24, Z
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	48 f4       	brcc	.+18     	; 0x1786 <__pack_f+0x2e>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e1       	ldi	r26, 0x10	; 16
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e8 2a       	or	r14, r24
    177e:	f9 2a       	or	r15, r25
    1780:	0a 2b       	or	r16, r26
    1782:	1b 2b       	or	r17, r27
    1784:	a5 c0       	rjmp	.+330    	; 0x18d0 <__pack_f+0x178>
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	09 f4       	brne	.+2      	; 0x178c <__pack_f+0x34>
    178a:	9f c0       	rjmp	.+318    	; 0x18ca <__pack_f+0x172>
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	21 f4       	brne	.+8      	; 0x1798 <__pack_f+0x40>
    1790:	ee 24       	eor	r14, r14
    1792:	ff 24       	eor	r15, r15
    1794:	87 01       	movw	r16, r14
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__pack_f+0x4a>
    1798:	e1 14       	cp	r14, r1
    179a:	f1 04       	cpc	r15, r1
    179c:	01 05       	cpc	r16, r1
    179e:	11 05       	cpc	r17, r1
    17a0:	19 f4       	brne	.+6      	; 0x17a8 <__pack_f+0x50>
    17a2:	e0 e0       	ldi	r30, 0x00	; 0
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	96 c0       	rjmp	.+300    	; 0x18d4 <__pack_f+0x17c>
    17a8:	62 81       	ldd	r22, Z+2	; 0x02
    17aa:	73 81       	ldd	r23, Z+3	; 0x03
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	62 38       	cpi	r22, 0x82	; 130
    17b0:	79 07       	cpc	r23, r25
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <__pack_f+0x5e>
    17b4:	5b c0       	rjmp	.+182    	; 0x186c <__pack_f+0x114>
    17b6:	22 e8       	ldi	r18, 0x82	; 130
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	26 1b       	sub	r18, r22
    17bc:	37 0b       	sbc	r19, r23
    17be:	2a 31       	cpi	r18, 0x1A	; 26
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f0       	brlt	.+10     	; 0x17ce <__pack_f+0x76>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	2a c0       	rjmp	.+84     	; 0x1822 <__pack_f+0xca>
    17ce:	b8 01       	movw	r22, r16
    17d0:	a7 01       	movw	r20, r14
    17d2:	02 2e       	mov	r0, r18
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__pack_f+0x86>
    17d6:	76 95       	lsr	r23
    17d8:	67 95       	ror	r22
    17da:	57 95       	ror	r21
    17dc:	47 95       	ror	r20
    17de:	0a 94       	dec	r0
    17e0:	d2 f7       	brpl	.-12     	; 0x17d6 <__pack_f+0x7e>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__pack_f+0x9c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	aa 1f       	adc	r26, r26
    17f2:	bb 1f       	adc	r27, r27
    17f4:	2a 95       	dec	r18
    17f6:	d2 f7       	brpl	.-12     	; 0x17ec <__pack_f+0x94>
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	a1 09       	sbc	r26, r1
    17fc:	b1 09       	sbc	r27, r1
    17fe:	8e 21       	and	r24, r14
    1800:	9f 21       	and	r25, r15
    1802:	a0 23       	and	r26, r16
    1804:	b1 23       	and	r27, r17
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	a1 05       	cpc	r26, r1
    180a:	b1 05       	cpc	r27, r1
    180c:	21 f0       	breq	.+8      	; 0x1816 <__pack_f+0xbe>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	9a 01       	movw	r18, r20
    1818:	ab 01       	movw	r20, r22
    181a:	28 2b       	or	r18, r24
    181c:	39 2b       	or	r19, r25
    181e:	4a 2b       	or	r20, r26
    1820:	5b 2b       	or	r21, r27
    1822:	da 01       	movw	r26, r20
    1824:	c9 01       	movw	r24, r18
    1826:	8f 77       	andi	r24, 0x7F	; 127
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	a0 70       	andi	r26, 0x00	; 0
    182c:	b0 70       	andi	r27, 0x00	; 0
    182e:	80 34       	cpi	r24, 0x40	; 64
    1830:	91 05       	cpc	r25, r1
    1832:	a1 05       	cpc	r26, r1
    1834:	b1 05       	cpc	r27, r1
    1836:	39 f4       	brne	.+14     	; 0x1846 <__pack_f+0xee>
    1838:	27 ff       	sbrs	r18, 7
    183a:	09 c0       	rjmp	.+18     	; 0x184e <__pack_f+0xf6>
    183c:	20 5c       	subi	r18, 0xC0	; 192
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	4f 4f       	sbci	r20, 0xFF	; 255
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	04 c0       	rjmp	.+8      	; 0x184e <__pack_f+0xf6>
    1846:	21 5c       	subi	r18, 0xC1	; 193
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	4f 4f       	sbci	r20, 0xFF	; 255
    184c:	5f 4f       	sbci	r21, 0xFF	; 255
    184e:	e0 e0       	ldi	r30, 0x00	; 0
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	20 30       	cpi	r18, 0x00	; 0
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	3a 07       	cpc	r19, r26
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	4a 07       	cpc	r20, r26
    185c:	a0 e4       	ldi	r26, 0x40	; 64
    185e:	5a 07       	cpc	r21, r26
    1860:	10 f0       	brcs	.+4      	; 0x1866 <__pack_f+0x10e>
    1862:	e1 e0       	ldi	r30, 0x01	; 1
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	79 01       	movw	r14, r18
    1868:	8a 01       	movw	r16, r20
    186a:	27 c0       	rjmp	.+78     	; 0x18ba <__pack_f+0x162>
    186c:	60 38       	cpi	r22, 0x80	; 128
    186e:	71 05       	cpc	r23, r1
    1870:	64 f5       	brge	.+88     	; 0x18ca <__pack_f+0x172>
    1872:	fb 01       	movw	r30, r22
    1874:	e1 58       	subi	r30, 0x81	; 129
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	d8 01       	movw	r26, r16
    187a:	c7 01       	movw	r24, r14
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	a0 70       	andi	r26, 0x00	; 0
    1882:	b0 70       	andi	r27, 0x00	; 0
    1884:	80 34       	cpi	r24, 0x40	; 64
    1886:	91 05       	cpc	r25, r1
    1888:	a1 05       	cpc	r26, r1
    188a:	b1 05       	cpc	r27, r1
    188c:	39 f4       	brne	.+14     	; 0x189c <__pack_f+0x144>
    188e:	e7 fe       	sbrs	r14, 7
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <__pack_f+0x154>
    1892:	80 e4       	ldi	r24, 0x40	; 64
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <__pack_f+0x14c>
    189c:	8f e3       	ldi	r24, 0x3F	; 63
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 0e       	add	r14, r24
    18a6:	f9 1e       	adc	r15, r25
    18a8:	0a 1f       	adc	r16, r26
    18aa:	1b 1f       	adc	r17, r27
    18ac:	17 ff       	sbrs	r17, 7
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <__pack_f+0x162>
    18b0:	16 95       	lsr	r17
    18b2:	07 95       	ror	r16
    18b4:	f7 94       	ror	r15
    18b6:	e7 94       	ror	r14
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	87 e0       	ldi	r24, 0x07	; 7
    18bc:	16 95       	lsr	r17
    18be:	07 95       	ror	r16
    18c0:	f7 94       	ror	r15
    18c2:	e7 94       	ror	r14
    18c4:	8a 95       	dec	r24
    18c6:	d1 f7       	brne	.-12     	; 0x18bc <__pack_f+0x164>
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__pack_f+0x17c>
    18ca:	ee 24       	eor	r14, r14
    18cc:	ff 24       	eor	r15, r15
    18ce:	87 01       	movw	r16, r14
    18d0:	ef ef       	ldi	r30, 0xFF	; 255
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	6e 2f       	mov	r22, r30
    18d6:	67 95       	ror	r22
    18d8:	66 27       	eor	r22, r22
    18da:	67 95       	ror	r22
    18dc:	90 2f       	mov	r25, r16
    18de:	9f 77       	andi	r25, 0x7F	; 127
    18e0:	d7 94       	ror	r13
    18e2:	dd 24       	eor	r13, r13
    18e4:	d7 94       	ror	r13
    18e6:	8e 2f       	mov	r24, r30
    18e8:	86 95       	lsr	r24
    18ea:	49 2f       	mov	r20, r25
    18ec:	46 2b       	or	r20, r22
    18ee:	58 2f       	mov	r21, r24
    18f0:	5d 29       	or	r21, r13
    18f2:	b7 01       	movw	r22, r14
    18f4:	ca 01       	movw	r24, r20
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	08 95       	ret

00001902 <__unpack_f>:
    1902:	fc 01       	movw	r30, r24
    1904:	db 01       	movw	r26, r22
    1906:	40 81       	ld	r20, Z
    1908:	51 81       	ldd	r21, Z+1	; 0x01
    190a:	22 81       	ldd	r18, Z+2	; 0x02
    190c:	62 2f       	mov	r22, r18
    190e:	6f 77       	andi	r22, 0x7F	; 127
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	22 1f       	adc	r18, r18
    1914:	22 27       	eor	r18, r18
    1916:	22 1f       	adc	r18, r18
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	89 2f       	mov	r24, r25
    191c:	88 0f       	add	r24, r24
    191e:	82 2b       	or	r24, r18
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	99 1f       	adc	r25, r25
    1926:	99 27       	eor	r25, r25
    1928:	99 1f       	adc	r25, r25
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	9c 93       	st	X, r25
    192e:	11 97       	sbiw	r26, 0x01	; 1
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	a9 f5       	brne	.+106    	; 0x19a0 <__unpack_f+0x9e>
    1936:	41 15       	cp	r20, r1
    1938:	51 05       	cpc	r21, r1
    193a:	61 05       	cpc	r22, r1
    193c:	71 05       	cpc	r23, r1
    193e:	11 f4       	brne	.+4      	; 0x1944 <__unpack_f+0x42>
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	37 c0       	rjmp	.+110    	; 0x19b2 <__unpack_f+0xb0>
    1944:	82 e8       	ldi	r24, 0x82	; 130
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	13 96       	adiw	r26, 0x03	; 3
    194a:	9c 93       	st	X, r25
    194c:	8e 93       	st	-X, r24
    194e:	12 97       	sbiw	r26, 0x02	; 2
    1950:	9a 01       	movw	r18, r20
    1952:	ab 01       	movw	r20, r22
    1954:	67 e0       	ldi	r22, 0x07	; 7
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	44 1f       	adc	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	6a 95       	dec	r22
    1960:	d1 f7       	brne	.-12     	; 0x1956 <__unpack_f+0x54>
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	8c 93       	st	X, r24
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <__unpack_f+0x80>
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	44 1f       	adc	r20, r20
    196e:	55 1f       	adc	r21, r21
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	8d 91       	ld	r24, X+
    1974:	9c 91       	ld	r25, X
    1976:	13 97       	sbiw	r26, 0x03	; 3
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	13 96       	adiw	r26, 0x03	; 3
    197c:	9c 93       	st	X, r25
    197e:	8e 93       	st	-X, r24
    1980:	12 97       	sbiw	r26, 0x02	; 2
    1982:	20 30       	cpi	r18, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	38 07       	cpc	r19, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	48 07       	cpc	r20, r24
    198c:	80 e4       	ldi	r24, 0x40	; 64
    198e:	58 07       	cpc	r21, r24
    1990:	58 f3       	brcs	.-42     	; 0x1968 <__unpack_f+0x66>
    1992:	14 96       	adiw	r26, 0x04	; 4
    1994:	2d 93       	st	X+, r18
    1996:	3d 93       	st	X+, r19
    1998:	4d 93       	st	X+, r20
    199a:	5c 93       	st	X, r21
    199c:	17 97       	sbiw	r26, 0x07	; 7
    199e:	08 95       	ret
    19a0:	2f 3f       	cpi	r18, 0xFF	; 255
    19a2:	31 05       	cpc	r19, r1
    19a4:	79 f4       	brne	.+30     	; 0x19c4 <__unpack_f+0xc2>
    19a6:	41 15       	cp	r20, r1
    19a8:	51 05       	cpc	r21, r1
    19aa:	61 05       	cpc	r22, r1
    19ac:	71 05       	cpc	r23, r1
    19ae:	19 f4       	brne	.+6      	; 0x19b6 <__unpack_f+0xb4>
    19b0:	84 e0       	ldi	r24, 0x04	; 4
    19b2:	8c 93       	st	X, r24
    19b4:	08 95       	ret
    19b6:	64 ff       	sbrs	r22, 4
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <__unpack_f+0xbe>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	8c 93       	st	X, r24
    19be:	12 c0       	rjmp	.+36     	; 0x19e4 <__unpack_f+0xe2>
    19c0:	1c 92       	st	X, r1
    19c2:	10 c0       	rjmp	.+32     	; 0x19e4 <__unpack_f+0xe2>
    19c4:	2f 57       	subi	r18, 0x7F	; 127
    19c6:	30 40       	sbci	r19, 0x00	; 0
    19c8:	13 96       	adiw	r26, 0x03	; 3
    19ca:	3c 93       	st	X, r19
    19cc:	2e 93       	st	-X, r18
    19ce:	12 97       	sbiw	r26, 0x02	; 2
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	8c 93       	st	X, r24
    19d4:	87 e0       	ldi	r24, 0x07	; 7
    19d6:	44 0f       	add	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	66 1f       	adc	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	8a 95       	dec	r24
    19e0:	d1 f7       	brne	.-12     	; 0x19d6 <__unpack_f+0xd4>
    19e2:	70 64       	ori	r23, 0x40	; 64
    19e4:	14 96       	adiw	r26, 0x04	; 4
    19e6:	4d 93       	st	X+, r20
    19e8:	5d 93       	st	X+, r21
    19ea:	6d 93       	st	X+, r22
    19ec:	7c 93       	st	X, r23
    19ee:	17 97       	sbiw	r26, 0x07	; 7
    19f0:	08 95       	ret

000019f2 <__fpcmp_parts_f>:
    19f2:	1f 93       	push	r17
    19f4:	dc 01       	movw	r26, r24
    19f6:	fb 01       	movw	r30, r22
    19f8:	9c 91       	ld	r25, X
    19fa:	92 30       	cpi	r25, 0x02	; 2
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <__fpcmp_parts_f+0xe>
    19fe:	47 c0       	rjmp	.+142    	; 0x1a8e <__fpcmp_parts_f+0x9c>
    1a00:	80 81       	ld	r24, Z
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <__fpcmp_parts_f+0x16>
    1a06:	43 c0       	rjmp	.+134    	; 0x1a8e <__fpcmp_parts_f+0x9c>
    1a08:	94 30       	cpi	r25, 0x04	; 4
    1a0a:	51 f4       	brne	.+20     	; 0x1a20 <__fpcmp_parts_f+0x2e>
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	1c 91       	ld	r17, X
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	99 f5       	brne	.+102    	; 0x1a7a <__fpcmp_parts_f+0x88>
    1a14:	81 81       	ldd	r24, Z+1	; 0x01
    1a16:	68 2f       	mov	r22, r24
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	61 1b       	sub	r22, r17
    1a1c:	71 09       	sbc	r23, r1
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <__fpcmp_parts_f+0xac>
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <__fpcmp_parts_f+0x3a>
    1a24:	92 30       	cpi	r25, 0x02	; 2
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <__fpcmp_parts_f+0x42>
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	b9 f1       	breq	.+110    	; 0x1a9a <__fpcmp_parts_f+0xa8>
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	88 23       	and	r24, r24
    1a30:	89 f1       	breq	.+98     	; 0x1a94 <__fpcmp_parts_f+0xa2>
    1a32:	2d c0       	rjmp	.+90     	; 0x1a8e <__fpcmp_parts_f+0x9c>
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	1c 91       	ld	r17, X
    1a38:	11 97       	sbiw	r26, 0x01	; 1
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	f1 f0       	breq	.+60     	; 0x1a7a <__fpcmp_parts_f+0x88>
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	18 17       	cp	r17, r24
    1a42:	d9 f4       	brne	.+54     	; 0x1a7a <__fpcmp_parts_f+0x88>
    1a44:	12 96       	adiw	r26, 0x02	; 2
    1a46:	2d 91       	ld	r18, X+
    1a48:	3c 91       	ld	r19, X
    1a4a:	13 97       	sbiw	r26, 0x03	; 3
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	82 17       	cp	r24, r18
    1a52:	93 07       	cpc	r25, r19
    1a54:	94 f0       	brlt	.+36     	; 0x1a7a <__fpcmp_parts_f+0x88>
    1a56:	28 17       	cp	r18, r24
    1a58:	39 07       	cpc	r19, r25
    1a5a:	bc f0       	brlt	.+46     	; 0x1a8a <__fpcmp_parts_f+0x98>
    1a5c:	14 96       	adiw	r26, 0x04	; 4
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9d 91       	ld	r25, X+
    1a62:	0d 90       	ld	r0, X+
    1a64:	bc 91       	ld	r27, X
    1a66:	a0 2d       	mov	r26, r0
    1a68:	24 81       	ldd	r18, Z+4	; 0x04
    1a6a:	35 81       	ldd	r19, Z+5	; 0x05
    1a6c:	46 81       	ldd	r20, Z+6	; 0x06
    1a6e:	57 81       	ldd	r21, Z+7	; 0x07
    1a70:	28 17       	cp	r18, r24
    1a72:	39 07       	cpc	r19, r25
    1a74:	4a 07       	cpc	r20, r26
    1a76:	5b 07       	cpc	r21, r27
    1a78:	18 f4       	brcc	.+6      	; 0x1a80 <__fpcmp_parts_f+0x8e>
    1a7a:	11 23       	and	r17, r17
    1a7c:	41 f0       	breq	.+16     	; 0x1a8e <__fpcmp_parts_f+0x9c>
    1a7e:	0a c0       	rjmp	.+20     	; 0x1a94 <__fpcmp_parts_f+0xa2>
    1a80:	82 17       	cp	r24, r18
    1a82:	93 07       	cpc	r25, r19
    1a84:	a4 07       	cpc	r26, r20
    1a86:	b5 07       	cpc	r27, r21
    1a88:	40 f4       	brcc	.+16     	; 0x1a9a <__fpcmp_parts_f+0xa8>
    1a8a:	11 23       	and	r17, r17
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <__fpcmp_parts_f+0xa2>
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <__fpcmp_parts_f+0xac>
    1a94:	6f ef       	ldi	r22, 0xFF	; 255
    1a96:	7f ef       	ldi	r23, 0xFF	; 255
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <__fpcmp_parts_f+0xac>
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	1f 91       	pop	r17
    1aa2:	08 95       	ret

00001aa4 <__udivmodsi4>:
    1aa4:	a1 e2       	ldi	r26, 0x21	; 33
    1aa6:	1a 2e       	mov	r1, r26
    1aa8:	aa 1b       	sub	r26, r26
    1aaa:	bb 1b       	sub	r27, r27
    1aac:	fd 01       	movw	r30, r26
    1aae:	0d c0       	rjmp	.+26     	; 0x1aca <__udivmodsi4_ep>

00001ab0 <__udivmodsi4_loop>:
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	ee 1f       	adc	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	a2 17       	cp	r26, r18
    1aba:	b3 07       	cpc	r27, r19
    1abc:	e4 07       	cpc	r30, r20
    1abe:	f5 07       	cpc	r31, r21
    1ac0:	20 f0       	brcs	.+8      	; 0x1aca <__udivmodsi4_ep>
    1ac2:	a2 1b       	sub	r26, r18
    1ac4:	b3 0b       	sbc	r27, r19
    1ac6:	e4 0b       	sbc	r30, r20
    1ac8:	f5 0b       	sbc	r31, r21

00001aca <__udivmodsi4_ep>:
    1aca:	66 1f       	adc	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	1a 94       	dec	r1
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <__udivmodsi4_loop>
    1ad6:	60 95       	com	r22
    1ad8:	70 95       	com	r23
    1ada:	80 95       	com	r24
    1adc:	90 95       	com	r25
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	bd 01       	movw	r22, r26
    1ae4:	cf 01       	movw	r24, r30
    1ae6:	08 95       	ret

00001ae8 <__prologue_saves__>:
    1ae8:	2f 92       	push	r2
    1aea:	3f 92       	push	r3
    1aec:	4f 92       	push	r4
    1aee:	5f 92       	push	r5
    1af0:	6f 92       	push	r6
    1af2:	7f 92       	push	r7
    1af4:	8f 92       	push	r8
    1af6:	9f 92       	push	r9
    1af8:	af 92       	push	r10
    1afa:	bf 92       	push	r11
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	ca 1b       	sub	r28, r26
    1b12:	db 0b       	sbc	r29, r27
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	09 94       	ijmp

00001b20 <__epilogue_restores__>:
    1b20:	2a 88       	ldd	r2, Y+18	; 0x12
    1b22:	39 88       	ldd	r3, Y+17	; 0x11
    1b24:	48 88       	ldd	r4, Y+16	; 0x10
    1b26:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b28:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b30:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b32:	b9 84       	ldd	r11, Y+9	; 0x09
    1b34:	c8 84       	ldd	r12, Y+8	; 0x08
    1b36:	df 80       	ldd	r13, Y+7	; 0x07
    1b38:	ee 80       	ldd	r14, Y+6	; 0x06
    1b3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b3c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b40:	aa 81       	ldd	r26, Y+2	; 0x02
    1b42:	b9 81       	ldd	r27, Y+1	; 0x01
    1b44:	ce 0f       	add	r28, r30
    1b46:	d1 1d       	adc	r29, r1
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	ed 01       	movw	r28, r26
    1b54:	08 95       	ret

00001b56 <atoi>:
    1b56:	fc 01       	movw	r30, r24
    1b58:	88 27       	eor	r24, r24
    1b5a:	99 27       	eor	r25, r25
    1b5c:	e8 94       	clt
    1b5e:	21 91       	ld	r18, Z+
    1b60:	20 32       	cpi	r18, 0x20	; 32
    1b62:	e9 f3       	breq	.-6      	; 0x1b5e <atoi+0x8>
    1b64:	29 30       	cpi	r18, 0x09	; 9
    1b66:	10 f0       	brcs	.+4      	; 0x1b6c <atoi+0x16>
    1b68:	2e 30       	cpi	r18, 0x0E	; 14
    1b6a:	c8 f3       	brcs	.-14     	; 0x1b5e <atoi+0x8>
    1b6c:	2b 32       	cpi	r18, 0x2B	; 43
    1b6e:	41 f0       	breq	.+16     	; 0x1b80 <atoi+0x2a>
    1b70:	2d 32       	cpi	r18, 0x2D	; 45
    1b72:	39 f4       	brne	.+14     	; 0x1b82 <atoi+0x2c>
    1b74:	68 94       	set
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <atoi+0x2a>
    1b78:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__mulhi_const_10>
    1b7c:	82 0f       	add	r24, r18
    1b7e:	91 1d       	adc	r25, r1
    1b80:	21 91       	ld	r18, Z+
    1b82:	20 53       	subi	r18, 0x30	; 48
    1b84:	2a 30       	cpi	r18, 0x0A	; 10
    1b86:	c0 f3       	brcs	.-16     	; 0x1b78 <atoi+0x22>
    1b88:	1e f4       	brtc	.+6      	; 0x1b90 <atoi+0x3a>
    1b8a:	90 95       	com	r25
    1b8c:	81 95       	neg	r24
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	08 95       	ret

00001b92 <__mulhi_const_10>:
    1b92:	7a e0       	ldi	r23, 0x0A	; 10
    1b94:	97 9f       	mul	r25, r23
    1b96:	90 2d       	mov	r25, r0
    1b98:	87 9f       	mul	r24, r23
    1b9a:	80 2d       	mov	r24, r0
    1b9c:	91 0d       	add	r25, r1
    1b9e:	11 24       	eor	r1, r1
    1ba0:	08 95       	ret

00001ba2 <sprintf>:
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	2e 97       	sbiw	r28, 0x0e	; 14
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	0d 89       	ldd	r16, Y+21	; 0x15
    1bbc:	1e 89       	ldd	r17, Y+22	; 0x16
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	8c 83       	std	Y+4, r24	; 0x04
    1bc2:	1a 83       	std	Y+2, r17	; 0x02
    1bc4:	09 83       	std	Y+1, r16	; 0x01
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f e7       	ldi	r25, 0x7F	; 127
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	9e 01       	movw	r18, r28
    1bd0:	27 5e       	subi	r18, 0xE7	; 231
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	6f 89       	ldd	r22, Y+23	; 0x17
    1bda:	78 8d       	ldd	r23, Y+24	; 0x18
    1bdc:	a9 01       	movw	r20, r18
    1bde:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vfprintf>
    1be2:	2f 81       	ldd	r18, Y+7	; 0x07
    1be4:	38 85       	ldd	r19, Y+8	; 0x08
    1be6:	02 0f       	add	r16, r18
    1be8:	13 1f       	adc	r17, r19
    1bea:	f8 01       	movw	r30, r16
    1bec:	10 82       	st	Z, r1
    1bee:	2e 96       	adiw	r28, 0x0e	; 14
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <vfprintf>:
    1c04:	2f 92       	push	r2
    1c06:	3f 92       	push	r3
    1c08:	4f 92       	push	r4
    1c0a:	5f 92       	push	r5
    1c0c:	6f 92       	push	r6
    1c0e:	7f 92       	push	r7
    1c10:	8f 92       	push	r8
    1c12:	9f 92       	push	r9
    1c14:	af 92       	push	r10
    1c16:	bf 92       	push	r11
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	3c 01       	movw	r6, r24
    1c3a:	2b 01       	movw	r4, r22
    1c3c:	5a 01       	movw	r10, r20
    1c3e:	fc 01       	movw	r30, r24
    1c40:	17 82       	std	Z+7, r1	; 0x07
    1c42:	16 82       	std	Z+6, r1	; 0x06
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	81 fd       	sbrc	r24, 1
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <vfprintf+0x4c>
    1c4a:	6f ef       	ldi	r22, 0xFF	; 255
    1c4c:	7f ef       	ldi	r23, 0xFF	; 255
    1c4e:	c6 c1       	rjmp	.+908    	; 0x1fdc <vfprintf+0x3d8>
    1c50:	9a e0       	ldi	r25, 0x0A	; 10
    1c52:	89 2e       	mov	r8, r25
    1c54:	1e 01       	movw	r2, r28
    1c56:	08 94       	sec
    1c58:	21 1c       	adc	r2, r1
    1c5a:	31 1c       	adc	r3, r1
    1c5c:	f3 01       	movw	r30, r6
    1c5e:	23 81       	ldd	r18, Z+3	; 0x03
    1c60:	f2 01       	movw	r30, r4
    1c62:	23 fd       	sbrc	r18, 3
    1c64:	85 91       	lpm	r24, Z+
    1c66:	23 ff       	sbrs	r18, 3
    1c68:	81 91       	ld	r24, Z+
    1c6a:	2f 01       	movw	r4, r30
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <vfprintf+0x6e>
    1c70:	b2 c1       	rjmp	.+868    	; 0x1fd6 <vfprintf+0x3d2>
    1c72:	85 32       	cpi	r24, 0x25	; 37
    1c74:	39 f4       	brne	.+14     	; 0x1c84 <vfprintf+0x80>
    1c76:	23 fd       	sbrc	r18, 3
    1c78:	85 91       	lpm	r24, Z+
    1c7a:	23 ff       	sbrs	r18, 3
    1c7c:	81 91       	ld	r24, Z+
    1c7e:	2f 01       	movw	r4, r30
    1c80:	85 32       	cpi	r24, 0x25	; 37
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <vfprintf+0x8a>
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	b3 01       	movw	r22, r6
    1c88:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1c8c:	e7 cf       	rjmp	.-50     	; 0x1c5c <vfprintf+0x58>
    1c8e:	98 2f       	mov	r25, r24
    1c90:	ff 24       	eor	r15, r15
    1c92:	ee 24       	eor	r14, r14
    1c94:	99 24       	eor	r9, r9
    1c96:	ff e1       	ldi	r31, 0x1F	; 31
    1c98:	ff 15       	cp	r31, r15
    1c9a:	d0 f0       	brcs	.+52     	; 0x1cd0 <vfprintf+0xcc>
    1c9c:	9b 32       	cpi	r25, 0x2B	; 43
    1c9e:	69 f0       	breq	.+26     	; 0x1cba <vfprintf+0xb6>
    1ca0:	9c 32       	cpi	r25, 0x2C	; 44
    1ca2:	28 f4       	brcc	.+10     	; 0x1cae <vfprintf+0xaa>
    1ca4:	90 32       	cpi	r25, 0x20	; 32
    1ca6:	59 f0       	breq	.+22     	; 0x1cbe <vfprintf+0xba>
    1ca8:	93 32       	cpi	r25, 0x23	; 35
    1caa:	91 f4       	brne	.+36     	; 0x1cd0 <vfprintf+0xcc>
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <vfprintf+0xc6>
    1cae:	9d 32       	cpi	r25, 0x2D	; 45
    1cb0:	49 f0       	breq	.+18     	; 0x1cc4 <vfprintf+0xc0>
    1cb2:	90 33       	cpi	r25, 0x30	; 48
    1cb4:	69 f4       	brne	.+26     	; 0x1cd0 <vfprintf+0xcc>
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	24 c0       	rjmp	.+72     	; 0x1d02 <vfprintf+0xfe>
    1cba:	52 e0       	ldi	r21, 0x02	; 2
    1cbc:	f5 2a       	or	r15, r21
    1cbe:	84 e0       	ldi	r24, 0x04	; 4
    1cc0:	f8 2a       	or	r15, r24
    1cc2:	28 c0       	rjmp	.+80     	; 0x1d14 <vfprintf+0x110>
    1cc4:	98 e0       	ldi	r25, 0x08	; 8
    1cc6:	f9 2a       	or	r15, r25
    1cc8:	25 c0       	rjmp	.+74     	; 0x1d14 <vfprintf+0x110>
    1cca:	e0 e1       	ldi	r30, 0x10	; 16
    1ccc:	fe 2a       	or	r15, r30
    1cce:	22 c0       	rjmp	.+68     	; 0x1d14 <vfprintf+0x110>
    1cd0:	f7 fc       	sbrc	r15, 7
    1cd2:	29 c0       	rjmp	.+82     	; 0x1d26 <vfprintf+0x122>
    1cd4:	89 2f       	mov	r24, r25
    1cd6:	80 53       	subi	r24, 0x30	; 48
    1cd8:	8a 30       	cpi	r24, 0x0A	; 10
    1cda:	70 f4       	brcc	.+28     	; 0x1cf8 <vfprintf+0xf4>
    1cdc:	f6 fe       	sbrs	r15, 6
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <vfprintf+0xe6>
    1ce0:	98 9c       	mul	r9, r8
    1ce2:	90 2c       	mov	r9, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	98 0e       	add	r9, r24
    1ce8:	15 c0       	rjmp	.+42     	; 0x1d14 <vfprintf+0x110>
    1cea:	e8 9c       	mul	r14, r8
    1cec:	e0 2c       	mov	r14, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	e8 0e       	add	r14, r24
    1cf2:	f0 e2       	ldi	r31, 0x20	; 32
    1cf4:	ff 2a       	or	r15, r31
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <vfprintf+0x110>
    1cf8:	9e 32       	cpi	r25, 0x2E	; 46
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <vfprintf+0x102>
    1cfc:	f6 fc       	sbrc	r15, 6
    1cfe:	6b c1       	rjmp	.+726    	; 0x1fd6 <vfprintf+0x3d2>
    1d00:	40 e4       	ldi	r20, 0x40	; 64
    1d02:	f4 2a       	or	r15, r20
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <vfprintf+0x110>
    1d06:	9c 36       	cpi	r25, 0x6C	; 108
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <vfprintf+0x10c>
    1d0a:	50 e8       	ldi	r21, 0x80	; 128
    1d0c:	f5 2a       	or	r15, r21
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <vfprintf+0x110>
    1d10:	98 36       	cpi	r25, 0x68	; 104
    1d12:	49 f4       	brne	.+18     	; 0x1d26 <vfprintf+0x122>
    1d14:	f2 01       	movw	r30, r4
    1d16:	23 fd       	sbrc	r18, 3
    1d18:	95 91       	lpm	r25, Z+
    1d1a:	23 ff       	sbrs	r18, 3
    1d1c:	91 91       	ld	r25, Z+
    1d1e:	2f 01       	movw	r4, r30
    1d20:	99 23       	and	r25, r25
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <vfprintf+0x122>
    1d24:	b8 cf       	rjmp	.-144    	; 0x1c96 <vfprintf+0x92>
    1d26:	89 2f       	mov	r24, r25
    1d28:	85 54       	subi	r24, 0x45	; 69
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	18 f0       	brcs	.+6      	; 0x1d34 <vfprintf+0x130>
    1d2e:	80 52       	subi	r24, 0x20	; 32
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	38 f4       	brcc	.+14     	; 0x1d42 <vfprintf+0x13e>
    1d34:	44 e0       	ldi	r20, 0x04	; 4
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	a4 0e       	add	r10, r20
    1d3a:	b5 1e       	adc	r11, r21
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	59 83       	std	Y+1, r21	; 0x01
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <vfprintf+0x15c>
    1d42:	93 36       	cpi	r25, 0x63	; 99
    1d44:	31 f0       	breq	.+12     	; 0x1d52 <vfprintf+0x14e>
    1d46:	93 37       	cpi	r25, 0x73	; 115
    1d48:	79 f0       	breq	.+30     	; 0x1d68 <vfprintf+0x164>
    1d4a:	93 35       	cpi	r25, 0x53	; 83
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <vfprintf+0x14c>
    1d4e:	56 c0       	rjmp	.+172    	; 0x1dfc <vfprintf+0x1f8>
    1d50:	20 c0       	rjmp	.+64     	; 0x1d92 <vfprintf+0x18e>
    1d52:	f5 01       	movw	r30, r10
    1d54:	80 81       	ld	r24, Z
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	42 e0       	ldi	r20, 0x02	; 2
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	a4 0e       	add	r10, r20
    1d5e:	b5 1e       	adc	r11, r21
    1d60:	61 01       	movw	r12, r2
    1d62:	01 e0       	ldi	r16, 0x01	; 1
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	12 c0       	rjmp	.+36     	; 0x1d8c <vfprintf+0x188>
    1d68:	f5 01       	movw	r30, r10
    1d6a:	c0 80       	ld	r12, Z
    1d6c:	d1 80       	ldd	r13, Z+1	; 0x01
    1d6e:	f6 fc       	sbrc	r15, 6
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <vfprintf+0x174>
    1d72:	6f ef       	ldi	r22, 0xFF	; 255
    1d74:	7f ef       	ldi	r23, 0xFF	; 255
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <vfprintf+0x178>
    1d78:	69 2d       	mov	r22, r9
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	42 e0       	ldi	r20, 0x02	; 2
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	a4 0e       	add	r10, r20
    1d82:	b5 1e       	adc	r11, r21
    1d84:	c6 01       	movw	r24, r12
    1d86:	0e 94 13 10 	call	0x2026	; 0x2026 <strnlen>
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	5f e7       	ldi	r21, 0x7F	; 127
    1d8e:	f5 22       	and	r15, r21
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <vfprintf+0x1b6>
    1d92:	f5 01       	movw	r30, r10
    1d94:	c0 80       	ld	r12, Z
    1d96:	d1 80       	ldd	r13, Z+1	; 0x01
    1d98:	f6 fc       	sbrc	r15, 6
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <vfprintf+0x19e>
    1d9c:	6f ef       	ldi	r22, 0xFF	; 255
    1d9e:	7f ef       	ldi	r23, 0xFF	; 255
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <vfprintf+0x1a2>
    1da2:	69 2d       	mov	r22, r9
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	42 e0       	ldi	r20, 0x02	; 2
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	a4 0e       	add	r10, r20
    1dac:	b5 1e       	adc	r11, r21
    1dae:	c6 01       	movw	r24, r12
    1db0:	0e 94 08 10 	call	0x2010	; 0x2010 <strnlen_P>
    1db4:	8c 01       	movw	r16, r24
    1db6:	50 e8       	ldi	r21, 0x80	; 128
    1db8:	f5 2a       	or	r15, r21
    1dba:	f3 fe       	sbrs	r15, 3
    1dbc:	07 c0       	rjmp	.+14     	; 0x1dcc <vfprintf+0x1c8>
    1dbe:	1a c0       	rjmp	.+52     	; 0x1df4 <vfprintf+0x1f0>
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1dca:	ea 94       	dec	r14
    1dcc:	8e 2d       	mov	r24, r14
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	08 17       	cp	r16, r24
    1dd2:	19 07       	cpc	r17, r25
    1dd4:	a8 f3       	brcs	.-22     	; 0x1dc0 <vfprintf+0x1bc>
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <vfprintf+0x1f0>
    1dd8:	f6 01       	movw	r30, r12
    1dda:	f7 fc       	sbrc	r15, 7
    1ddc:	85 91       	lpm	r24, Z+
    1dde:	f7 fe       	sbrs	r15, 7
    1de0:	81 91       	ld	r24, Z+
    1de2:	6f 01       	movw	r12, r30
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	b3 01       	movw	r22, r6
    1de8:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1dec:	e1 10       	cpse	r14, r1
    1dee:	ea 94       	dec	r14
    1df0:	01 50       	subi	r16, 0x01	; 1
    1df2:	10 40       	sbci	r17, 0x00	; 0
    1df4:	01 15       	cp	r16, r1
    1df6:	11 05       	cpc	r17, r1
    1df8:	79 f7       	brne	.-34     	; 0x1dd8 <vfprintf+0x1d4>
    1dfa:	ea c0       	rjmp	.+468    	; 0x1fd0 <vfprintf+0x3cc>
    1dfc:	94 36       	cpi	r25, 0x64	; 100
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <vfprintf+0x200>
    1e00:	99 36       	cpi	r25, 0x69	; 105
    1e02:	69 f5       	brne	.+90     	; 0x1e5e <vfprintf+0x25a>
    1e04:	f7 fe       	sbrs	r15, 7
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <vfprintf+0x214>
    1e08:	f5 01       	movw	r30, r10
    1e0a:	20 81       	ld	r18, Z
    1e0c:	31 81       	ldd	r19, Z+1	; 0x01
    1e0e:	42 81       	ldd	r20, Z+2	; 0x02
    1e10:	53 81       	ldd	r21, Z+3	; 0x03
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0a c0       	rjmp	.+20     	; 0x1e2c <vfprintf+0x228>
    1e18:	f5 01       	movw	r30, r10
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	9c 01       	movw	r18, r24
    1e20:	44 27       	eor	r20, r20
    1e22:	37 fd       	sbrc	r19, 7
    1e24:	40 95       	com	r20
    1e26:	54 2f       	mov	r21, r20
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a8 0e       	add	r10, r24
    1e2e:	b9 1e       	adc	r11, r25
    1e30:	9f e6       	ldi	r25, 0x6F	; 111
    1e32:	f9 22       	and	r15, r25
    1e34:	57 ff       	sbrs	r21, 7
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <vfprintf+0x246>
    1e38:	50 95       	com	r21
    1e3a:	40 95       	com	r20
    1e3c:	30 95       	com	r19
    1e3e:	21 95       	neg	r18
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	4f 4f       	sbci	r20, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	e0 e8       	ldi	r30, 0x80	; 128
    1e48:	fe 2a       	or	r15, r30
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	a1 01       	movw	r20, r2
    1e50:	2a e0       	ldi	r18, 0x0A	; 10
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	0e 94 4a 10 	call	0x2094	; 0x2094 <__ultoa_invert>
    1e58:	d8 2e       	mov	r13, r24
    1e5a:	d2 18       	sub	r13, r2
    1e5c:	40 c0       	rjmp	.+128    	; 0x1ede <vfprintf+0x2da>
    1e5e:	95 37       	cpi	r25, 0x75	; 117
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <vfprintf+0x268>
    1e62:	1f 2d       	mov	r17, r15
    1e64:	1f 7e       	andi	r17, 0xEF	; 239
    1e66:	2a e0       	ldi	r18, 0x0A	; 10
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	1d c0       	rjmp	.+58     	; 0x1ea6 <vfprintf+0x2a2>
    1e6c:	1f 2d       	mov	r17, r15
    1e6e:	19 7f       	andi	r17, 0xF9	; 249
    1e70:	9f 36       	cpi	r25, 0x6F	; 111
    1e72:	61 f0       	breq	.+24     	; 0x1e8c <vfprintf+0x288>
    1e74:	90 37       	cpi	r25, 0x70	; 112
    1e76:	20 f4       	brcc	.+8      	; 0x1e80 <vfprintf+0x27c>
    1e78:	98 35       	cpi	r25, 0x58	; 88
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <vfprintf+0x27a>
    1e7c:	ac c0       	rjmp	.+344    	; 0x1fd6 <vfprintf+0x3d2>
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <vfprintf+0x29a>
    1e80:	90 37       	cpi	r25, 0x70	; 112
    1e82:	39 f0       	breq	.+14     	; 0x1e92 <vfprintf+0x28e>
    1e84:	98 37       	cpi	r25, 0x78	; 120
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <vfprintf+0x286>
    1e88:	a6 c0       	rjmp	.+332    	; 0x1fd6 <vfprintf+0x3d2>
    1e8a:	04 c0       	rjmp	.+8      	; 0x1e94 <vfprintf+0x290>
    1e8c:	28 e0       	ldi	r18, 0x08	; 8
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <vfprintf+0x2a2>
    1e92:	10 61       	ori	r17, 0x10	; 16
    1e94:	14 fd       	sbrc	r17, 4
    1e96:	14 60       	ori	r17, 0x04	; 4
    1e98:	20 e1       	ldi	r18, 0x10	; 16
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <vfprintf+0x2a2>
    1e9e:	14 fd       	sbrc	r17, 4
    1ea0:	16 60       	ori	r17, 0x06	; 6
    1ea2:	20 e1       	ldi	r18, 0x10	; 16
    1ea4:	32 e0       	ldi	r19, 0x02	; 2
    1ea6:	17 ff       	sbrs	r17, 7
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <vfprintf+0x2b6>
    1eaa:	f5 01       	movw	r30, r10
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	44 e0       	ldi	r20, 0x04	; 4
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	08 c0       	rjmp	.+16     	; 0x1eca <vfprintf+0x2c6>
    1eba:	f5 01       	movw	r30, r10
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	42 e0       	ldi	r20, 0x02	; 2
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	a4 0e       	add	r10, r20
    1ecc:	b5 1e       	adc	r11, r21
    1ece:	a1 01       	movw	r20, r2
    1ed0:	0e 94 4a 10 	call	0x2094	; 0x2094 <__ultoa_invert>
    1ed4:	d8 2e       	mov	r13, r24
    1ed6:	d2 18       	sub	r13, r2
    1ed8:	8f e7       	ldi	r24, 0x7F	; 127
    1eda:	f8 2e       	mov	r15, r24
    1edc:	f1 22       	and	r15, r17
    1ede:	f6 fe       	sbrs	r15, 6
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <vfprintf+0x2f4>
    1ee2:	5e ef       	ldi	r21, 0xFE	; 254
    1ee4:	f5 22       	and	r15, r21
    1ee6:	d9 14       	cp	r13, r9
    1ee8:	38 f4       	brcc	.+14     	; 0x1ef8 <vfprintf+0x2f4>
    1eea:	f4 fe       	sbrs	r15, 4
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <vfprintf+0x2f8>
    1eee:	f2 fc       	sbrc	r15, 2
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <vfprintf+0x2f8>
    1ef2:	8f ee       	ldi	r24, 0xEF	; 239
    1ef4:	f8 22       	and	r15, r24
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <vfprintf+0x2f8>
    1ef8:	1d 2d       	mov	r17, r13
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <vfprintf+0x2fa>
    1efc:	19 2d       	mov	r17, r9
    1efe:	f4 fe       	sbrs	r15, 4
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <vfprintf+0x318>
    1f02:	fe 01       	movw	r30, r28
    1f04:	ed 0d       	add	r30, r13
    1f06:	f1 1d       	adc	r31, r1
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 33       	cpi	r24, 0x30	; 48
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <vfprintf+0x310>
    1f0e:	99 ee       	ldi	r25, 0xE9	; 233
    1f10:	f9 22       	and	r15, r25
    1f12:	08 c0       	rjmp	.+16     	; 0x1f24 <vfprintf+0x320>
    1f14:	1f 5f       	subi	r17, 0xFF	; 255
    1f16:	f2 fe       	sbrs	r15, 2
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <vfprintf+0x320>
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <vfprintf+0x31e>
    1f1c:	8f 2d       	mov	r24, r15
    1f1e:	86 78       	andi	r24, 0x86	; 134
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <vfprintf+0x320>
    1f22:	1f 5f       	subi	r17, 0xFF	; 255
    1f24:	0f 2d       	mov	r16, r15
    1f26:	f3 fc       	sbrc	r15, 3
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <vfprintf+0x34e>
    1f2a:	f0 fe       	sbrs	r15, 0
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <vfprintf+0x348>
    1f2e:	1e 15       	cp	r17, r14
    1f30:	10 f0       	brcs	.+4      	; 0x1f36 <vfprintf+0x332>
    1f32:	9d 2c       	mov	r9, r13
    1f34:	0b c0       	rjmp	.+22     	; 0x1f4c <vfprintf+0x348>
    1f36:	9d 2c       	mov	r9, r13
    1f38:	9e 0c       	add	r9, r14
    1f3a:	91 1a       	sub	r9, r17
    1f3c:	1e 2d       	mov	r17, r14
    1f3e:	06 c0       	rjmp	.+12     	; 0x1f4c <vfprintf+0x348>
    1f40:	80 e2       	ldi	r24, 0x20	; 32
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	b3 01       	movw	r22, r6
    1f46:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1f4a:	1f 5f       	subi	r17, 0xFF	; 255
    1f4c:	1e 15       	cp	r17, r14
    1f4e:	c0 f3       	brcs	.-16     	; 0x1f40 <vfprintf+0x33c>
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <vfprintf+0x356>
    1f52:	1e 15       	cp	r17, r14
    1f54:	10 f4       	brcc	.+4      	; 0x1f5a <vfprintf+0x356>
    1f56:	e1 1a       	sub	r14, r17
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <vfprintf+0x358>
    1f5a:	ee 24       	eor	r14, r14
    1f5c:	04 ff       	sbrs	r16, 4
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <vfprintf+0x37a>
    1f60:	80 e3       	ldi	r24, 0x30	; 48
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	b3 01       	movw	r22, r6
    1f66:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1f6a:	02 ff       	sbrs	r16, 2
    1f6c:	1d c0       	rjmp	.+58     	; 0x1fa8 <vfprintf+0x3a4>
    1f6e:	01 fd       	sbrc	r16, 1
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <vfprintf+0x374>
    1f72:	88 e7       	ldi	r24, 0x78	; 120
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e c0       	rjmp	.+28     	; 0x1f94 <vfprintf+0x390>
    1f78:	88 e5       	ldi	r24, 0x58	; 88
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0b c0       	rjmp	.+22     	; 0x1f94 <vfprintf+0x390>
    1f7e:	80 2f       	mov	r24, r16
    1f80:	86 78       	andi	r24, 0x86	; 134
    1f82:	91 f0       	breq	.+36     	; 0x1fa8 <vfprintf+0x3a4>
    1f84:	01 ff       	sbrs	r16, 1
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <vfprintf+0x388>
    1f88:	8b e2       	ldi	r24, 0x2B	; 43
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <vfprintf+0x38a>
    1f8c:	80 e2       	ldi	r24, 0x20	; 32
    1f8e:	f7 fc       	sbrc	r15, 7
    1f90:	8d e2       	ldi	r24, 0x2D	; 45
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	b3 01       	movw	r22, r6
    1f96:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1f9a:	06 c0       	rjmp	.+12     	; 0x1fa8 <vfprintf+0x3a4>
    1f9c:	80 e3       	ldi	r24, 0x30	; 48
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	b3 01       	movw	r22, r6
    1fa2:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1fa6:	9a 94       	dec	r9
    1fa8:	d9 14       	cp	r13, r9
    1faa:	c0 f3       	brcs	.-16     	; 0x1f9c <vfprintf+0x398>
    1fac:	da 94       	dec	r13
    1fae:	f1 01       	movw	r30, r2
    1fb0:	ed 0d       	add	r30, r13
    1fb2:	f1 1d       	adc	r31, r1
    1fb4:	80 81       	ld	r24, Z
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	b3 01       	movw	r22, r6
    1fba:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1fbe:	dd 20       	and	r13, r13
    1fc0:	a9 f7       	brne	.-22     	; 0x1fac <vfprintf+0x3a8>
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <vfprintf+0x3cc>
    1fc4:	80 e2       	ldi	r24, 0x20	; 32
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	b3 01       	movw	r22, r6
    1fca:	0e 94 1e 10 	call	0x203c	; 0x203c <fputc>
    1fce:	ea 94       	dec	r14
    1fd0:	ee 20       	and	r14, r14
    1fd2:	c1 f7       	brne	.-16     	; 0x1fc4 <vfprintf+0x3c0>
    1fd4:	43 ce       	rjmp	.-890    	; 0x1c5c <vfprintf+0x58>
    1fd6:	f3 01       	movw	r30, r6
    1fd8:	66 81       	ldd	r22, Z+6	; 0x06
    1fda:	77 81       	ldd	r23, Z+7	; 0x07
    1fdc:	cb 01       	movw	r24, r22
    1fde:	2b 96       	adiw	r28, 0x0b	; 11
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	7f 90       	pop	r7
    2004:	6f 90       	pop	r6
    2006:	5f 90       	pop	r5
    2008:	4f 90       	pop	r4
    200a:	3f 90       	pop	r3
    200c:	2f 90       	pop	r2
    200e:	08 95       	ret

00002010 <strnlen_P>:
    2010:	fc 01       	movw	r30, r24
    2012:	05 90       	lpm	r0, Z+
    2014:	61 50       	subi	r22, 0x01	; 1
    2016:	70 40       	sbci	r23, 0x00	; 0
    2018:	01 10       	cpse	r0, r1
    201a:	d8 f7       	brcc	.-10     	; 0x2012 <strnlen_P+0x2>
    201c:	80 95       	com	r24
    201e:	90 95       	com	r25
    2020:	8e 0f       	add	r24, r30
    2022:	9f 1f       	adc	r25, r31
    2024:	08 95       	ret

00002026 <strnlen>:
    2026:	fc 01       	movw	r30, r24
    2028:	61 50       	subi	r22, 0x01	; 1
    202a:	70 40       	sbci	r23, 0x00	; 0
    202c:	01 90       	ld	r0, Z+
    202e:	01 10       	cpse	r0, r1
    2030:	d8 f7       	brcc	.-10     	; 0x2028 <strnlen+0x2>
    2032:	80 95       	com	r24
    2034:	90 95       	com	r25
    2036:	8e 0f       	add	r24, r30
    2038:	9f 1f       	adc	r25, r31
    203a:	08 95       	ret

0000203c <fputc>:
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	8c 01       	movw	r16, r24
    2046:	eb 01       	movw	r28, r22
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	81 ff       	sbrs	r24, 1
    204c:	1b c0       	rjmp	.+54     	; 0x2084 <fputc+0x48>
    204e:	82 ff       	sbrs	r24, 2
    2050:	0d c0       	rjmp	.+26     	; 0x206c <fputc+0x30>
    2052:	2e 81       	ldd	r18, Y+6	; 0x06
    2054:	3f 81       	ldd	r19, Y+7	; 0x07
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	28 17       	cp	r18, r24
    205c:	39 07       	cpc	r19, r25
    205e:	64 f4       	brge	.+24     	; 0x2078 <fputc+0x3c>
    2060:	e8 81       	ld	r30, Y
    2062:	f9 81       	ldd	r31, Y+1	; 0x01
    2064:	01 93       	st	Z+, r16
    2066:	f9 83       	std	Y+1, r31	; 0x01
    2068:	e8 83       	st	Y, r30
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <fputc+0x3c>
    206c:	e8 85       	ldd	r30, Y+8	; 0x08
    206e:	f9 85       	ldd	r31, Y+9	; 0x09
    2070:	80 2f       	mov	r24, r16
    2072:	09 95       	icall
    2074:	89 2b       	or	r24, r25
    2076:	31 f4       	brne	.+12     	; 0x2084 <fputc+0x48>
    2078:	8e 81       	ldd	r24, Y+6	; 0x06
    207a:	9f 81       	ldd	r25, Y+7	; 0x07
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	9f 83       	std	Y+7, r25	; 0x07
    2080:	8e 83       	std	Y+6, r24	; 0x06
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <fputc+0x4c>
    2084:	0f ef       	ldi	r16, 0xFF	; 255
    2086:	1f ef       	ldi	r17, 0xFF	; 255
    2088:	c8 01       	movw	r24, r16
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <__ultoa_invert>:
    2094:	fa 01       	movw	r30, r20
    2096:	aa 27       	eor	r26, r26
    2098:	28 30       	cpi	r18, 0x08	; 8
    209a:	51 f1       	breq	.+84     	; 0x20f0 <__ultoa_invert+0x5c>
    209c:	20 31       	cpi	r18, 0x10	; 16
    209e:	81 f1       	breq	.+96     	; 0x2100 <__ultoa_invert+0x6c>
    20a0:	e8 94       	clt
    20a2:	6f 93       	push	r22
    20a4:	6e 7f       	andi	r22, 0xFE	; 254
    20a6:	6e 5f       	subi	r22, 0xFE	; 254
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	8f 4f       	sbci	r24, 0xFF	; 255
    20ac:	9f 4f       	sbci	r25, 0xFF	; 255
    20ae:	af 4f       	sbci	r26, 0xFF	; 255
    20b0:	b1 e0       	ldi	r27, 0x01	; 1
    20b2:	3e d0       	rcall	.+124    	; 0x2130 <__ultoa_invert+0x9c>
    20b4:	b4 e0       	ldi	r27, 0x04	; 4
    20b6:	3c d0       	rcall	.+120    	; 0x2130 <__ultoa_invert+0x9c>
    20b8:	67 0f       	add	r22, r23
    20ba:	78 1f       	adc	r23, r24
    20bc:	89 1f       	adc	r24, r25
    20be:	9a 1f       	adc	r25, r26
    20c0:	a1 1d       	adc	r26, r1
    20c2:	68 0f       	add	r22, r24
    20c4:	79 1f       	adc	r23, r25
    20c6:	8a 1f       	adc	r24, r26
    20c8:	91 1d       	adc	r25, r1
    20ca:	a1 1d       	adc	r26, r1
    20cc:	6a 0f       	add	r22, r26
    20ce:	71 1d       	adc	r23, r1
    20d0:	81 1d       	adc	r24, r1
    20d2:	91 1d       	adc	r25, r1
    20d4:	a1 1d       	adc	r26, r1
    20d6:	20 d0       	rcall	.+64     	; 0x2118 <__ultoa_invert+0x84>
    20d8:	09 f4       	brne	.+2      	; 0x20dc <__ultoa_invert+0x48>
    20da:	68 94       	set
    20dc:	3f 91       	pop	r19
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	26 9f       	mul	r18, r22
    20e2:	11 24       	eor	r1, r1
    20e4:	30 19       	sub	r19, r0
    20e6:	30 5d       	subi	r19, 0xD0	; 208
    20e8:	31 93       	st	Z+, r19
    20ea:	de f6       	brtc	.-74     	; 0x20a2 <__ultoa_invert+0xe>
    20ec:	cf 01       	movw	r24, r30
    20ee:	08 95       	ret
    20f0:	46 2f       	mov	r20, r22
    20f2:	47 70       	andi	r20, 0x07	; 7
    20f4:	40 5d       	subi	r20, 0xD0	; 208
    20f6:	41 93       	st	Z+, r20
    20f8:	b3 e0       	ldi	r27, 0x03	; 3
    20fa:	0f d0       	rcall	.+30     	; 0x211a <__ultoa_invert+0x86>
    20fc:	c9 f7       	brne	.-14     	; 0x20f0 <__ultoa_invert+0x5c>
    20fe:	f6 cf       	rjmp	.-20     	; 0x20ec <__ultoa_invert+0x58>
    2100:	46 2f       	mov	r20, r22
    2102:	4f 70       	andi	r20, 0x0F	; 15
    2104:	40 5d       	subi	r20, 0xD0	; 208
    2106:	4a 33       	cpi	r20, 0x3A	; 58
    2108:	18 f0       	brcs	.+6      	; 0x2110 <__ultoa_invert+0x7c>
    210a:	49 5d       	subi	r20, 0xD9	; 217
    210c:	31 fd       	sbrc	r19, 1
    210e:	40 52       	subi	r20, 0x20	; 32
    2110:	41 93       	st	Z+, r20
    2112:	02 d0       	rcall	.+4      	; 0x2118 <__ultoa_invert+0x84>
    2114:	a9 f7       	brne	.-22     	; 0x2100 <__ultoa_invert+0x6c>
    2116:	ea cf       	rjmp	.-44     	; 0x20ec <__ultoa_invert+0x58>
    2118:	b4 e0       	ldi	r27, 0x04	; 4
    211a:	a6 95       	lsr	r26
    211c:	97 95       	ror	r25
    211e:	87 95       	ror	r24
    2120:	77 95       	ror	r23
    2122:	67 95       	ror	r22
    2124:	ba 95       	dec	r27
    2126:	c9 f7       	brne	.-14     	; 0x211a <__ultoa_invert+0x86>
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	61 05       	cpc	r22, r1
    212c:	71 05       	cpc	r23, r1
    212e:	08 95       	ret
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	0a 2e       	mov	r0, r26
    2136:	06 94       	lsr	r0
    2138:	57 95       	ror	r21
    213a:	47 95       	ror	r20
    213c:	37 95       	ror	r19
    213e:	27 95       	ror	r18
    2140:	ba 95       	dec	r27
    2142:	c9 f7       	brne	.-14     	; 0x2136 <__ultoa_invert+0xa2>
    2144:	62 0f       	add	r22, r18
    2146:	73 1f       	adc	r23, r19
    2148:	84 1f       	adc	r24, r20
    214a:	95 1f       	adc	r25, r21
    214c:	a0 1d       	adc	r26, r0
    214e:	08 95       	ret

00002150 <_exit>:
    2150:	f8 94       	cli

00002152 <__stop_program>:
    2152:	ff cf       	rjmp	.-2      	; 0x2152 <__stop_program>
